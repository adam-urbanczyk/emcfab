;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 2/13/2010 2:32:29 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2901			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00A7			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00A6			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00A8			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0871			MOVF	STACK_1, 0
$000E	$00AC			MOVWF	STSAVED_1
$000F	$0870			MOVF	STACK_0, 0
$0010	$00AB			MOVWF	STSAVED_0
;safety_interlock.c,105 :: 		void interrupt(){
;safety_interlock.c,111 :: 		if ( PIR1.TMR1IF == 1 ){
$0011	$3001			MOVLW	1
$0012	$050C			ANDWF	PIR1, 0
$0013	$00F2			MOVWF	STACK_2
$0014	$0872			MOVF	STACK_2, 0
$0015	$3A01			XORLW	1
$0016	$1D03			BTFSS	STATUS, Z
$0017	$2844			GOTO	L_interrupt_1
;safety_interlock.c,115 :: 		if ( ok == 0 ){
$0018	$3000			MOVLW	0
$0019	$0621			XORWF	_ok+1, 0
$001A	$1D03			BTFSS	STATUS, Z
$001B	$281E			GOTO	L_interrupt_17
$001C	$3000			MOVLW	0
$001D	$0620			XORWF	_ok, 0
$001E	$	L_interrupt_17:
$001E	$1D03			BTFSS	STATUS, Z
$001F	$2843			GOTO	L_interrupt_2
;safety_interlock.c,116 :: 		if ( blinkCounter >  0 ){
$0020	$0823			MOVF	_blinkCounter+1, 0
$0021	$3C00			SUBLW	0
$0022	$1D03			BTFSS	STATUS, Z
$0023	$2826			GOTO	L_interrupt_18
$0024	$0822			MOVF	_blinkCounter, 0
$0025	$3C00			SUBLW	0
$0026	$	L_interrupt_18:
$0026	$1803			BTFSC	STATUS, C
$0027	$282D			GOTO	L_interrupt_3
;safety_interlock.c,117 :: 		blinkCounter --;
$0028	$3001			MOVLW	1
$0029	$02A2			SUBWF	_blinkCounter, 1
$002A	$1C03			BTFSS	STATUS, C
$002B	$03A3			DECF	_blinkCounter+1, 1
;safety_interlock.c,118 :: 		}
$002C	$2843			GOTO	L_interrupt_4
$002D	$	L_interrupt_3:
;safety_interlock.c,120 :: 		blinkCounter = BLINK_INTERVAL;
$002D	$3010			MOVLW	16
$002E	$00A2			MOVWF	_blinkCounter
$002F	$3000			MOVLW	0
$0030	$00A3			MOVWF	_blinkCounter+1
;safety_interlock.c,121 :: 		blinkCounter = (int)(cause * BLINK_INTERVAL);
$0031	$3004			MOVLW	4
$0032	$00F4			MOVWF	STACK_4
$0033	$0824			MOVF	_cause, 0
$0034	$00F0			MOVWF	STACK_0
$0035	$0825			MOVF	_cause+1, 0
$0036	$00F1			MOVWF	STACK_0+1
$0037	$0874			MOVF	STACK_4, 0
$0038	$	L_interrupt_19:
$0038	$1903			BTFSC	STATUS, Z
$0039	$283F			GOTO	L_interrupt_20
$003A	$0DF0			RLF	STACK_0, 1
$003B	$0DF1			RLF	STACK_0+1, 1
$003C	$1070			BCF	STACK_0, 0
$003D	$3FFF			ADDLW	255
$003E	$2838			GOTO	L_interrupt_19
$003F	$	L_interrupt_20:
$003F	$0870			MOVF	STACK_0, 0
$0040	$00A2			MOVWF	_blinkCounter
$0041	$0871			MOVF	STACK_0+1, 0
$0042	$00A3			MOVWF	_blinkCounter+1
;safety_interlock.c,123 :: 		}
$0043	$	L_interrupt_4:
;safety_interlock.c,124 :: 		}
$0043	$	L_interrupt_2:
;safety_interlock.c,127 :: 		PIR1.TMR1IF = 0;
$0043	$100C			BCF	PIR1, 0
;safety_interlock.c,129 :: 		}
$0044	$	L_interrupt_1:
;safety_interlock.c,130 :: 		}
$0044	$	L_Interrupt_end:
$0044	$082C			MOVF	STSAVED_1, 0
$0045	$00F1			MOVWF	STACK_1
$0046	$082B			MOVF	STSAVED_0, 0
$0047	$00F0			MOVWF	STACK_0
$0048	$0828			MOVF	?savePCLATH, 0
$0049	$008A			MOVWF	PCLATH
$004A	$0826			MOVF	?saveFSR, 0
$004B	$0084			MOVWF	FSR
$004C	$0E27			SWAPF	?saveSTATUS, 0
$004D	$0083			MOVWF	STATUS
$004E	$0EFF			SWAPF	STACK_15, 1
$004F	$0E7F			SWAPF	STACK_15, 0
$0050	$0009			RETFIE
$0051	$	_enable:
;safety_interlock.c,84 :: 		void enable(){
;safety_interlock.c,85 :: 		if ( REQUIRE_RESET_ON_FAULT == 1  ) return;
$0051	$	L_enable_0:
;safety_interlock.c,87 :: 		ERR_OUT = 0;
$0051	$1303			BCF	STATUS, RP1
$0052	$1283			BCF	STATUS, RP0
$0053	$1007			BCF	PORTC, 0
;safety_interlock.c,88 :: 		ok = 1;
$0054	$3001			MOVLW	1
$0055	$00A0			MOVWF	_ok
$0056	$3000			MOVLW	0
$0057	$00A1			MOVWF	_ok+1
;safety_interlock.c,89 :: 		ENABLE_OUT = 0;
$0058	$1087			BCF	PORTC, 1
;safety_interlock.c,91 :: 		INTCON.PEIE = 0;
$0059	$130B			BCF	INTCON, 6
;safety_interlock.c,93 :: 		}
$005A	$0008			RETURN
$005B	$	_disable:
;safety_interlock.c,95 :: 		void disable(){
;safety_interlock.c,97 :: 		ERR_OUT = 1;
$005B	$1303			BCF	STATUS, RP1
$005C	$1283			BCF	STATUS, RP0
$005D	$1407			BSF	PORTC, 0
;safety_interlock.c,98 :: 		ok = 0;
$005E	$01A0			CLRF	_ok
$005F	$01A1			CLRF	_ok+1
;safety_interlock.c,99 :: 		blinkCounter =  0;
$0060	$01A2			CLRF	_blinkCounter
$0061	$01A3			CLRF	_blinkCounter+1
;safety_interlock.c,101 :: 		INTCON.PEIE = 1;
$0062	$170B			BSF	INTCON, 6
;safety_interlock.c,102 :: 		}
$0063	$0008			RETURN
$0064	$	_initRegisters:
;safety_interlock.c,182 :: 		void initRegisters(){
;safety_interlock.c,184 :: 		ANSEL = 0x00; //turn off port a analog
$0064	$1303			BCF	STATUS, RP1
$0065	$1683			BSF	STATUS, RP0
$0066	$0191			CLRF	ANSEL, 1
;safety_interlock.c,185 :: 		CMCON0 =0b00000111; //connect digital io to port a
$0067	$3007			MOVLW	7
$0068	$1283			BCF	STATUS, RP0
$0069	$0099			MOVWF	CMCON0
;safety_interlock.c,187 :: 		TRISA = 0b11111111;
$006A	$30FF			MOVLW	255
$006B	$1683			BSF	STATUS, RP0
$006C	$0085			MOVWF	TRISA
;safety_interlock.c,188 :: 		WPUA = 0b00111111;
$006D	$303F			MOVLW	63
$006E	$0095			MOVWF	WPUA
;safety_interlock.c,189 :: 		OPTION_REG = 0x00;  ///enable porta pullups
$006F	$0181			CLRF	OPTION_REG, 1
;safety_interlock.c,192 :: 		TRISC = 0b11111100;
$0070	$30FC			MOVLW	252
$0071	$0087			MOVWF	TRISC
;safety_interlock.c,196 :: 		INTCON.GIE = 1;
$0072	$178B			BSF	INTCON, 7
;safety_interlock.c,197 :: 		T1CON= 0b00110101;
$0073	$3035			MOVLW	53
$0074	$1283			BCF	STATUS, RP0
$0075	$0090			MOVWF	T1CON
;safety_interlock.c,201 :: 		ERR_OUT = 0;
$0076	$1007			BCF	PORTC, 0
;safety_interlock.c,202 :: 		ENABLE_OUT = 1;
$0077	$1487			BSF	PORTC, 1
;safety_interlock.c,203 :: 		}
$0078	$0008			RETURN
$0079	$	_checkLatch:
;safety_interlock.c,133 :: 		void checkLatch(){
;safety_interlock.c,144 :: 		unsigned int newLatch = 1;
$0079	$3001			MOVLW	1
$007A	$1303			BCF	STATUS, RP1
$007B	$1283			BCF	STATUS, RP0
$007C	$00A9			MOVWF	checkLatch_newLatch_L0
$007D	$3000			MOVLW	0
$007E	$00AA			MOVWF	checkLatch_newLatch_L0+1
;safety_interlock.c,147 :: 		if ( LIMIT_Z == LIMIT_ERR || LIMIT_Y == LIMIT_ERR ||
$007F	$3000			MOVLW	0
$0080	$1985			BTFSC	PORTA, 3
$0081	$3001			MOVLW	1
$0082	$00F1			MOVWF	STACK_1
$0083	$0871			MOVF	STACK_1, 0
$0084	$3A01			XORLW	1
$0085	$1903			BTFSC	STATUS, Z
$0086	$289F			GOTO	L63_ex_L_checkLatch_7
$0087	$3000			MOVLW	0
$0088	$1A87			BTFSC	PORTC, 5
$0089	$3001			MOVLW	1
$008A	$00F1			MOVWF	STACK_1
$008B	$0871			MOVF	STACK_1, 0
$008C	$3A01			XORLW	1
$008D	$1903			BTFSC	STATUS, Z
$008E	$289F			GOTO	L63_ex_L_checkLatch_7
;safety_interlock.c,148 :: 		LIMIT_X == LIMIT_ERR || LIMIT_A == LIMIT_ERR ){
$008F	$3000			MOVLW	0
$0090	$1A07			BTFSC	PORTC, 4
$0091	$3001			MOVLW	1
$0092	$00F1			MOVWF	STACK_1
$0093	$0871			MOVF	STACK_1, 0
$0094	$3A01			XORLW	1
$0095	$1903			BTFSC	STATUS, Z
$0096	$289F			GOTO	L63_ex_L_checkLatch_7
$0097	$3000			MOVLW	0
$0098	$1A85			BTFSC	PORTA, 5
$0099	$3001			MOVLW	1
$009A	$00F1			MOVWF	STACK_1
$009B	$0871			MOVF	STACK_1, 0
$009C	$3A01			XORLW	1
$009D	$1D03			BTFSS	STATUS, Z
$009E	$28A5			GOTO	L_checkLatch_7
$009F	$	L63_ex_L_checkLatch_7:
;safety_interlock.c,149 :: 		newLatch = 0;
$009F	$01A9			CLRF	checkLatch_newLatch_L0
$00A0	$01AA			CLRF	checkLatch_newLatch_L0+1
;safety_interlock.c,150 :: 		cause = BLINK_INTERVAL_LIMITS;
$00A1	$3003			MOVLW	3
$00A2	$00A4			MOVWF	_cause
$00A3	$3000			MOVLW	0
$00A4	$00A5			MOVWF	_cause+1
;safety_interlock.c,151 :: 		}
$00A5	$	L_checkLatch_7:
;safety_interlock.c,154 :: 		if ( FAULT_A == FAULT_ERR || FAULT_Z == FAULT_ERR ||
$00A5	$3000			MOVLW	0
$00A6	$1A05			BTFSC	PORTA, 4
$00A7	$3001			MOVLW	1
$00A8	$00F1			MOVWF	STACK_1
$00A9	$0871			MOVF	STACK_1, 0
$00AA	$3A00			XORLW	0
$00AB	$1903			BTFSC	STATUS, Z
$00AC	$28C4			GOTO	L95_ex_L_checkLatch_10
$00AD	$3000			MOVLW	0
$00AE	$1905			BTFSC	PORTA, 2
$00AF	$3001			MOVLW	1
$00B0	$00F1			MOVWF	STACK_1
$00B1	$0871			MOVF	STACK_1, 0
$00B2	$3A00			XORLW	0
$00B3	$1903			BTFSC	STATUS, Z
$00B4	$28C4			GOTO	L95_ex_L_checkLatch_10
;safety_interlock.c,155 :: 		FAULT_Y == FAULT_ERR || FAULT_X == FAULT_ERR ){
$00B5	$3000			MOVLW	0
$00B6	$1885			BTFSC	PORTA, 1
$00B7	$3001			MOVLW	1
$00B8	$00F1			MOVWF	STACK_1
$00B9	$0871			MOVF	STACK_1, 0
$00BA	$3A00			XORLW	0
$00BB	$1903			BTFSC	STATUS, Z
$00BC	$28C4			GOTO	L95_ex_L_checkLatch_10
$00BD	$3001			MOVLW	1
$00BE	$0505			ANDWF	PORTA, 0
$00BF	$00F1			MOVWF	STACK_1
$00C0	$0871			MOVF	STACK_1, 0
$00C1	$3A00			XORLW	0
$00C2	$1D03			BTFSS	STATUS, Z
$00C3	$28CA			GOTO	L_checkLatch_10
$00C4	$	L95_ex_L_checkLatch_10:
;safety_interlock.c,156 :: 		newLatch = 0;
$00C4	$01A9			CLRF	checkLatch_newLatch_L0
$00C5	$01AA			CLRF	checkLatch_newLatch_L0+1
;safety_interlock.c,157 :: 		cause =  BLINK_INTERVAL_FAULT;
$00C6	$3004			MOVLW	4
$00C7	$00A4			MOVWF	_cause
$00C8	$3000			MOVLW	0
$00C9	$00A5			MOVWF	_cause+1
;safety_interlock.c,158 :: 		}
$00CA	$	L_checkLatch_10:
;safety_interlock.c,161 :: 		if ( ESTOP == ESTOP_ERR ){
$00CA	$3000			MOVLW	0
$00CB	$1907			BTFSC	PORTC, 2
$00CC	$3001			MOVLW	1
$00CD	$00F1			MOVWF	STACK_1
$00CE	$0871			MOVF	STACK_1, 0
$00CF	$3A01			XORLW	1
$00D0	$1D03			BTFSS	STATUS, Z
$00D1	$28D8			GOTO	L_checkLatch_11
;safety_interlock.c,162 :: 		newLatch = 0;
$00D2	$01A9			CLRF	checkLatch_newLatch_L0
$00D3	$01AA			CLRF	checkLatch_newLatch_L0+1
;safety_interlock.c,163 :: 		cause =  BLINK_INTERVAL_ESTOP;
$00D4	$3002			MOVLW	2
$00D5	$00A4			MOVWF	_cause
$00D6	$3000			MOVLW	0
$00D7	$00A5			MOVWF	_cause+1
;safety_interlock.c,164 :: 		}
$00D8	$	L_checkLatch_11:
;safety_interlock.c,166 :: 		if ( PC_ENABLE == PC_ERR ){
$00D8	$3000			MOVLW	0
$00D9	$1987			BTFSC	PORTC, 3
$00DA	$3001			MOVLW	1
$00DB	$00F1			MOVWF	STACK_1
$00DC	$0871			MOVF	STACK_1, 0
$00DD	$3A00			XORLW	0
$00DE	$1D03			BTFSS	STATUS, Z
$00DF	$28E6			GOTO	L_checkLatch_12
;safety_interlock.c,167 :: 		newLatch = 0;
$00E0	$01A9			CLRF	checkLatch_newLatch_L0
$00E1	$01AA			CLRF	checkLatch_newLatch_L0+1
;safety_interlock.c,168 :: 		cause = BLINK_INTERVAL_PC;
$00E2	$3001			MOVLW	1
$00E3	$00A4			MOVWF	_cause
$00E4	$3000			MOVLW	0
$00E5	$00A5			MOVWF	_cause+1
;safety_interlock.c,169 :: 		}
$00E6	$	L_checkLatch_12:
;safety_interlock.c,171 :: 		if ( newLatch == 1){
$00E6	$3000			MOVLW	0
$00E7	$062A			XORWF	checkLatch_newLatch_L0+1, 0
$00E8	$1D03			BTFSS	STATUS, Z
$00E9	$28EC			GOTO	L_checkLatch_21
$00EA	$3001			MOVLW	1
$00EB	$0629			XORWF	checkLatch_newLatch_L0, 0
$00EC	$	L_checkLatch_21:
$00EC	$1D03			BTFSS	STATUS, Z
$00ED	$28F0			GOTO	L_checkLatch_13
;safety_interlock.c,172 :: 		enable();
$00EE	$2051			CALL	_enable
;safety_interlock.c,173 :: 		}
$00EF	$28F1			GOTO	L_checkLatch_14
$00F0	$	L_checkLatch_13:
;safety_interlock.c,175 :: 		disable();
$00F0	$205B			CALL	_disable
;safety_interlock.c,176 :: 		}
$00F1	$	L_checkLatch_14:
;safety_interlock.c,178 :: 		}
$00F1	$0008			RETURN
$00F2	$	GlobalInisafety_interlock:
$00F2	$3000			MOVLW	0
$00F3	$1303			BCF	STATUS, RP1
$00F4	$1283			BCF	STATUS, RP0
$00F5	$00A0			MOVWF	_ok+0
$00F6	$3000			MOVLW	0
$00F7	$00A1			MOVWF	_ok+1
$00F8	$3000			MOVLW	0
$00F9	$00A4			MOVWF	_cause+0
$00FA	$3000			MOVLW	0
$00FB	$00A5			MOVWF	_cause+1
$00FC	$3010			MOVLW	16
$00FD	$00A2			MOVWF	_blinkCounter+0
$00FE	$3000			MOVLW	0
$00FF	$00A3			MOVWF	_blinkCounter+1
$0100	$0008			RETURN
$0101	$	_main:
;safety_interlock.c,205 :: 		void main() {
;safety_interlock.c,207 :: 		initRegisters();
$0101	$20F2			CALL	GlobalInisafety_interlock
$0102	$2064			CALL	_initRegisters
;safety_interlock.c,208 :: 		while(1) {
$0103	$	L_main_15:
;safety_interlock.c,209 :: 		checkLatch();
$0103	$2079			CALL	_checkLatch
;safety_interlock.c,210 :: 		}
$0104	$2903			GOTO	L_main_15
;safety_interlock.c,211 :: 		}
$0105	$2905			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		interrupt
$0051		enable
$005B		disable
$0064		initRegisters
$0079		checkLatch
$00F2		GlobalInisafety_interlock
$0101		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_interrupt:
$001E		L_interrupt_17:
$0026		L_interrupt_18:
$002D		L_interrupt_3:
$0038		L_interrupt_19:
$003F		L_interrupt_20:
$0043		L_interrupt_2:
$0043		L_interrupt_4:
$0044		L_interrupt_1:
$0044		L_Interrupt_end:
$0051		_enable:
$0051		L_enable_0:
$005B		_disable:
$0064		_initRegisters:
$0079		_checkLatch:
$009F		L63_ex_L_checkLatch_7:
$00A5		L_checkLatch_7:
$00C4		L95_ex_L_checkLatch_10:
$00CA		L_checkLatch_10:
$00D8		L_checkLatch_11:
$00E6		L_checkLatch_12:
$00EC		L_checkLatch_21:
$00F0		L_checkLatch_13:
$00F1		L_checkLatch_14:
$00F2		GlobalInisafety_interlock:
$0101		_main:
$0103		L_main_15:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0010		T1CON
$0019		CMCON0
$0020		_ok
$0022		_blinkCounter
$0024		_cause
$0026		?saveFSR
$0027		?saveSTATUS
$0028		?savePCLATH
$0029		checkLatch_newLatch_L0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0081		OPTION_REG
$0085		TRISA
$0087		TRISC
$0091		ANSEL
$0095		WPUA


