_enable:
  begin
//safety_interlock.c,85 :: 		if ( REQUIRE_RESET_ON_FAULT == 1  ) return;
L_enable_0:
//safety_interlock.c,87 :: 		ERR_OUT = 0;
	PORTC <-  PORTC & -2
//safety_interlock.c,88 :: 		ok = 1;
	_ok <- 1
//safety_interlock.c,89 :: 		ENABLE_OUT = 0;
	PORTC <-  PORTC & -3
//safety_interlock.c,91 :: 		INTCON.PEIE = 0;
	INTCON <-  INTCON & -65
  end

_disable:
  begin
//safety_interlock.c,97 :: 		ERR_OUT = 1;
	PORTC <-  PORTC | 1
//safety_interlock.c,98 :: 		ok = 0;
	_ok <- 0
//safety_interlock.c,99 :: 		blinkCounter =  0;
	_blinkCounter <- 0
//safety_interlock.c,101 :: 		INTCON.PEIE = 1;
	INTCON <-  INTCON | 64
  end

_interrupt:
  begin
//safety_interlock.c,111 :: 		if ( PIR1.TMR1IF == 1 ){
	STACK_2 <-  PIR1 & 1
	if ( STACK_2 != 1) then goto L_interrupt_1
//safety_interlock.c,115 :: 		if ( ok == 0 ){
	if ( _ok != 0) then goto L_interrupt_2
//safety_interlock.c,116 :: 		if ( blinkCounter >  0 ){
	if ( _blinkCounter <= 0) then goto L_interrupt_3
//safety_interlock.c,117 :: 		blinkCounter --;
	_blinkCounter <-  _blinkCounter - 1
	_blinkCounter <- _blinkCounter
//safety_interlock.c,118 :: 		}
	goto	L_interrupt_4
L_interrupt_3:
//safety_interlock.c,120 :: 		blinkCounter = BLINK_INTERVAL;
	_blinkCounter <- 16
//safety_interlock.c,121 :: 		blinkCounter = (int)(cause * BLINK_INTERVAL);
	STACK_0 <-  _cause * 16
	_blinkCounter <- STACK_0
//safety_interlock.c,123 :: 		}
L_interrupt_4:
//safety_interlock.c,124 :: 		}
L_interrupt_2:
//safety_interlock.c,127 :: 		PIR1.TMR1IF = 0;
	PIR1 <-  PIR1 & -2
//safety_interlock.c,129 :: 		}
L_interrupt_1:
  end

_checkLatch:
  begin
//safety_interlock.c,144 :: 		unsigned int newLatch = 1;
	checkLatch_newLatch_L0 <- 1
//safety_interlock.c,147 :: 		if ( LIMIT_Z == LIMIT_ERR || LIMIT_Y == LIMIT_ERR ||
	STACK_1 <-  PORTA & 8
	STACK_0 <- 3
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 1) then goto L63_ex_L_checkLatch_7
	STACK_1 <-  PORTC & 32
	STACK_0 <- 5
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 1) then goto L63_ex_L_checkLatch_7
//safety_interlock.c,148 :: 		LIMIT_X == LIMIT_ERR || LIMIT_A == LIMIT_ERR ){
	STACK_1 <-  PORTC & 16
	STACK_0 <- 4
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 1) then goto L63_ex_L_checkLatch_7
	STACK_1 <-  PORTA & 32
	STACK_0 <- 5
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 != 1) then goto L_checkLatch_7
L63_ex_L_checkLatch_7:
//safety_interlock.c,149 :: 		newLatch = 0;
	checkLatch_newLatch_L0 <- 0
//safety_interlock.c,150 :: 		cause = BLINK_INTERVAL_LIMITS;
	_cause <- 3
//safety_interlock.c,151 :: 		}
L_checkLatch_7:
//safety_interlock.c,154 :: 		if ( FAULT_A == FAULT_ERR || FAULT_Z == FAULT_ERR ||
	STACK_1 <-  PORTA & 16
	STACK_0 <- 4
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 0) then goto L95_ex_L_checkLatch_10
	STACK_1 <-  PORTA & 4
	STACK_0 <- 2
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 0) then goto L95_ex_L_checkLatch_10
//safety_interlock.c,155 :: 		FAULT_Y == FAULT_ERR || FAULT_X == FAULT_ERR ){
	STACK_1 <-  PORTA & 2
	STACK_0 <- 1
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 = 0) then goto L95_ex_L_checkLatch_10
	STACK_1 <-  PORTA & 1
	if ( STACK_1 != 0) then goto L_checkLatch_10
L95_ex_L_checkLatch_10:
//safety_interlock.c,156 :: 		newLatch = 0;
	checkLatch_newLatch_L0 <- 0
//safety_interlock.c,157 :: 		cause =  BLINK_INTERVAL_FAULT;
	_cause <- 4
//safety_interlock.c,158 :: 		}
L_checkLatch_10:
//safety_interlock.c,161 :: 		if ( ESTOP == ESTOP_ERR ){
	STACK_1 <-  PORTC & 4
	STACK_0 <- 2
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 != 1) then goto L_checkLatch_11
//safety_interlock.c,162 :: 		newLatch = 0;
	checkLatch_newLatch_L0 <- 0
//safety_interlock.c,163 :: 		cause =  BLINK_INTERVAL_ESTOP;
	_cause <- 2
//safety_interlock.c,164 :: 		}
L_checkLatch_11:
//safety_interlock.c,166 :: 		if ( PC_ENABLE == PC_ERR ){
	STACK_1 <-  PORTC & 8
	STACK_0 <- 3
	STACK_1 <-  STACK_1 shr STACK_0
	if ( STACK_1 != 0) then goto L_checkLatch_12
//safety_interlock.c,167 :: 		newLatch = 0;
	checkLatch_newLatch_L0 <- 0
//safety_interlock.c,168 :: 		cause = BLINK_INTERVAL_PC;
	_cause <- 1
//safety_interlock.c,169 :: 		}
L_checkLatch_12:
//safety_interlock.c,171 :: 		if ( newLatch == 1){
	if ( checkLatch_newLatch_L0 != 1) then goto L_checkLatch_13
//safety_interlock.c,172 :: 		enable();
	CALL _enable
//safety_interlock.c,173 :: 		}
	goto	L_checkLatch_14
L_checkLatch_13:
//safety_interlock.c,175 :: 		disable();
	CALL _disable
//safety_interlock.c,176 :: 		}
L_checkLatch_14:
  end

_initRegisters:
  begin
//safety_interlock.c,184 :: 		ANSEL = 0x00; //turn off port a analog
	ANSEL <- 0
//safety_interlock.c,185 :: 		CMCON0 =0b00000111; //connect digital io to port a
	CMCON0 <- 7
//safety_interlock.c,187 :: 		TRISA = 0b11111111;
	TRISA <- 255
//safety_interlock.c,188 :: 		WPUA = 0b00111111;
	WPUA <- 63
//safety_interlock.c,189 :: 		OPTION_REG = 0x00;  ///enable porta pullups
	OPTION_REG <- 0
//safety_interlock.c,192 :: 		TRISC = 0b11111100;
	TRISC <- 252
//safety_interlock.c,196 :: 		INTCON.GIE = 1;
	INTCON <-  INTCON | 128
//safety_interlock.c,197 :: 		T1CON= 0b00110101;
	T1CON <- 53
//safety_interlock.c,201 :: 		ERR_OUT = 0;
	PORTC <-  PORTC & -2
//safety_interlock.c,202 :: 		ENABLE_OUT = 1;
	PORTC <-  PORTC | 2
  end

_main:
  begin
//safety_interlock.c,207 :: 		initRegisters();
	CALL _initRegisters
//safety_interlock.c,208 :: 		while(1) {
L_main_15:
//safety_interlock.c,209 :: 		checkLatch();
	CALL _checkLatch
//safety_interlock.c,210 :: 		}
	goto	L_main_15
  end

GlobalInisafety_interlock:
  begin
  end

