;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 10/17/2009 11:15:20 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EFD3	F00A			GOTO	_main
$0008	$EF03	F001			GOTO	_interrupt
$0198	$	_findLargest:
;cnc_control.c,293 :: 			unsigned short c, unsigned short d ){
;cnc_control.c,294 :: 			if ( a > b ){
$0198	$0100	    			MOVLB	0
$019A	$51B6	    			MOVF	FARG_findLargest+0, 0, 1
$019C	$5DB7	    			SUBWF	FARG_findLargest+1, 0, 1
$019E	$E215	    			BC	L_findLargest_20
;cnc_control.c,295 :: 			if ( a > c ){
$01A0	$51B6	    			MOVF	FARG_findLargest+0, 0, 1
$01A2	$5DB8	    			SUBWF	FARG_findLargest+2, 0, 1
$01A4	$E209	    			BC	L_findLargest_21
;cnc_control.c,296 :: 			if ( a > d )
$01A6	$51B6	    			MOVF	FARG_findLargest+0, 0, 1
$01A8	$5DB9	    			SUBWF	FARG_findLargest+3, 0, 1
$01AA	$E203	    			BC	L_findLargest_22
;cnc_control.c,297 :: 			return a;
$01AC	$C0B6	F000			MOVFF	FARG_findLargest+0, STACK_0
$01B0	$0012	    			RETURN
$01B2	$	L_findLargest_22:
;cnc_control.c,299 :: 			return d;
$01B2	$C0B9	F000			MOVFF	FARG_findLargest+3, STACK_0
$01B6	$0012	    			RETURN
;cnc_control.c,300 :: 			}
$01B8	$	L_findLargest_21:
;cnc_control.c,302 :: 			if ( c > d )
$01B8	$51B8	    			MOVF	FARG_findLargest+2, 0, 1
$01BA	$5DB9	    			SUBWF	FARG_findLargest+3, 0, 1
$01BC	$E203	    			BC	L_findLargest_25
;cnc_control.c,303 :: 			return c;
$01BE	$C0B8	F000			MOVFF	FARG_findLargest+2, STACK_0
$01C2	$0012	    			RETURN
$01C4	$	L_findLargest_25:
;cnc_control.c,305 :: 			return d;
$01C4	$C0B9	F000			MOVFF	FARG_findLargest+3, STACK_0
$01C8	$0012	    			RETURN
;cnc_control.c,307 :: 			}
$01CA	$	L_findLargest_20:
;cnc_control.c,309 :: 			if ( b > c ){
$01CA	$51B7	    			MOVF	FARG_findLargest+1, 0, 1
$01CC	$5DB8	    			SUBWF	FARG_findLargest+2, 0, 1
$01CE	$E209	    			BC	L_findLargest_28
;cnc_control.c,310 :: 			if ( b > d ){
$01D0	$51B7	    			MOVF	FARG_findLargest+1, 0, 1
$01D2	$5DB9	    			SUBWF	FARG_findLargest+3, 0, 1
$01D4	$E203	    			BC	L_findLargest_29
;cnc_control.c,311 :: 			return b;
$01D6	$C0B7	F000			MOVFF	FARG_findLargest+1, STACK_0
$01DA	$0012	    			RETURN
;cnc_control.c,312 :: 			}
$01DC	$	L_findLargest_29:
;cnc_control.c,314 :: 			return d;
$01DC	$C0B9	F000			MOVFF	FARG_findLargest+3, STACK_0
$01E0	$0012	    			RETURN
;cnc_control.c,316 :: 			}
$01E2	$	L_findLargest_28:
;cnc_control.c,319 :: 			if ( c > d )
$01E2	$51B8	    			MOVF	FARG_findLargest+2, 0, 1
$01E4	$5DB9	    			SUBWF	FARG_findLargest+3, 0, 1
$01E6	$E203	    			BC	L_findLargest_32
;cnc_control.c,320 :: 			return c;
$01E8	$C0B8	F000			MOVFF	FARG_findLargest+2, STACK_0
$01EC	$0012	    			RETURN
$01EE	$	L_findLargest_32:
;cnc_control.c,322 :: 			return d;
$01EE	$C0B9	F000			MOVFF	FARG_findLargest+3, STACK_0
;cnc_control.c,325 :: 			}
$01F2	$0012	    			RETURN
$01F4	$	_delay5ClockCycles:
;cnc_control.c,204 :: 			void delay5ClockCycles( unsigned short value ){
;cnc_control.c,205 :: 			unsigned short i = 0;
$01F4	$0100	    			MOVLB	0
$01F6	$6BB7	    			CLRF	delay5ClockCycles_i_L0, 1
;cnc_control.c,206 :: 			for ( i=0;i< value;i++){
$01F8	$6BB7	    			CLRF	delay5ClockCycles_i_L0, 1
$01FA	$	L_delay5ClockCycles_10:
$01FA	$51B6	    			MOVF	FARG_delay5ClockCycles+0, 0, 1
$01FC	$5DB7	    			SUBWF	delay5ClockCycles_i_L0, 0, 1
$01FE	$E202	    			BC	L_delay5ClockCycles_11
;cnc_control.c,207 :: 			}
$0200	$	L_delay5ClockCycles_12:
;cnc_control.c,206 :: 			for ( i=0;i< value;i++){
$0200	$2BB7	    			INCF	delay5ClockCycles_i_L0, 1, 1
;cnc_control.c,207 :: 			}
$0202	$D7FB	    			BRA	L_delay5ClockCycles_10
$0204	$	L_delay5ClockCycles_11:
;cnc_control.c,208 :: 			return;
;cnc_control.c,209 :: 			}
$0204	$0012	    			RETURN
$0206	$	_interrupt:
$0206	$C001	F160			MOVFF	STACK_1, STSAVED_1
$020A	$C000	F15F			MOVFF	STACK_0, STSAVED_0
$020E	$CFE9	F0B2			MOVFF	FSR0L, ?saveFSR0
$0212	$CFEA	F0B3			MOVFF	FSR0H, ?saveFSR0+1
$0216	$CFE1	F0B4			MOVFF	FSR1L, ?saveFSR1
$021A	$CFE2	F0B5			MOVFF	FSR1H, ?saveFSR1+1
;cnc_control.c,329 :: 			void interrupt ( void ){
;cnc_control.c,330 :: 			if ( INTCON.RBIF ){
$021E	$A0F2	    			BTFSS	INTCON, 0, 0
$0220	$D0E3	    			BRA	L_interrupt_34
;cnc_control.c,335 :: 			unsigned short stepX = 0;
$0222	$0100	    			MOVLB	0
$0224	$6BAE	    			CLRF	interrupt_stepX_L1, 1
;cnc_control.c,336 :: 			unsigned short stepY = 0;
$0226	$6BAF	    			CLRF	interrupt_stepY_L1, 1
;cnc_control.c,337 :: 			unsigned short stepZ = 0;
$0228	$6BB0	    			CLRF	interrupt_stepZ_L1, 1
;cnc_control.c,338 :: 			unsigned short stepA = 0;
$022A	$6BB1	    			CLRF	interrupt_stepA_L1, 1
;cnc_control.c,342 :: 			if ( statusError == 1 ){
$022C	$5015	    			MOVF	_statusError, 0, 0
$022E	$0A01	    			XORLW	1
$0230	$E106	    			BNZ	L_interrupt_35
;cnc_control.c,343 :: 			X_STEP_OUT = 0;
$0232	$9082	    			BCF	PORTC, 0, 0
;cnc_control.c,344 :: 			Y_STEP_OUT = 0;
$0234	$9282	    			BCF	PORTC, 1, 0
;cnc_control.c,345 :: 			Z_STEP_OUT = 0;
$0236	$9482	    			BCF	PORTC, 2, 0
;cnc_control.c,346 :: 			A_STEP_OUT = 0;
$0238	$9682	    			BCF	PORTC, 3, 0
;cnc_control.c,347 :: 			INTCON.RBIF = 0;
$023A	$90F2	    			BCF	INTCON, 0, 0
;cnc_control.c,348 :: 			return;
$023C	$D0D5	    			BRA	L_Interrupt_end
;cnc_control.c,349 :: 			}
$023E	$	L_interrupt_35:
;cnc_control.c,353 :: 			if ( multipliers.enable == 0 ){
$023E	$501A	    			MOVF	_multipliers+4, 0, 0
$0240	$0A00	    			XORLW	0
$0242	$E126	    			BNZ	L_interrupt_36
;cnc_control.c,355 :: 			X_STEP_OUT = X_STEP_IN;
$0244	$6A01	    			CLRF	STACK_1, 0
$0246	$BE81	    			BTFSC	PORTB, 7, 0
$0248	$2A01	    			INCF	STACK_1, 1, 0
$024A	$0E00	    			MOVLW	0
$024C	$B001	    			BTFSC	STACK_1, 0, 0
$024E	$0E01	    			MOVLW	1
$0250	$1882	    			XORWF	PORTC, 0, 0
$0252	$0B01	    			ANDLW	1
$0254	$1A82	    			XORWF	PORTC, 1, 0
;cnc_control.c,356 :: 			Y_STEP_OUT = Y_STEP_IN;
$0256	$6A01	    			CLRF	STACK_1, 0
$0258	$BC81	    			BTFSC	PORTB, 6, 0
$025A	$2A01	    			INCF	STACK_1, 1, 0
$025C	$0E00	    			MOVLW	0
$025E	$B001	    			BTFSC	STACK_1, 0, 0
$0260	$0E02	    			MOVLW	2
$0262	$1882	    			XORWF	PORTC, 0, 0
$0264	$0B02	    			ANDLW	2
$0266	$1A82	    			XORWF	PORTC, 1, 0
;cnc_control.c,357 :: 			Z_STEP_OUT = Z_STEP_IN;
$0268	$6A01	    			CLRF	STACK_1, 0
$026A	$BA81	    			BTFSC	PORTB, 5, 0
$026C	$2A01	    			INCF	STACK_1, 1, 0
$026E	$0E00	    			MOVLW	0
$0270	$B001	    			BTFSC	STACK_1, 0, 0
$0272	$0E04	    			MOVLW	4
$0274	$1882	    			XORWF	PORTC, 0, 0
$0276	$0B04	    			ANDLW	4
$0278	$1A82	    			XORWF	PORTC, 1, 0
;cnc_control.c,358 :: 			A_STEP_OUT = A_STEP_IN;
$027A	$6A01	    			CLRF	STACK_1, 0
$027C	$B881	    			BTFSC	PORTB, 4, 0
$027E	$2A01	    			INCF	STACK_1, 1, 0
$0280	$0E00	    			MOVLW	0
$0282	$B001	    			BTFSC	STACK_1, 0, 0
$0284	$0E08	    			MOVLW	8
$0286	$1882	    			XORWF	PORTC, 0, 0
$0288	$0B08	    			ANDLW	8
$028A	$1A82	    			XORWF	PORTC, 1, 0
;cnc_control.c,359 :: 			INTCON.RBIF = 0;
$028C	$90F2	    			BCF	INTCON, 0, 0
;cnc_control.c,360 :: 			return;
$028E	$D0AC	    			BRA	L_Interrupt_end
;cnc_control.c,361 :: 			}
$0290	$	L_interrupt_36:
;cnc_control.c,376 :: 			maxmult = findLargest(multipliers.x,multipliers.y,multipliers.z,multipliers.a );
$0290	$0100	    			MOVLB	0
$0292	$C016	F0B6			MOVFF	_multipliers+0, FARG_findLargest+0
$0296	$C017	F0B7			MOVFF	_multipliers+1, FARG_findLargest+1
$029A	$C018	F0B8			MOVFF	_multipliers+2, FARG_findLargest+2
$029E	$C019	F0B9			MOVFF	_multipliers+3, FARG_findLargest+3
$02A2	$ECCC	F000			CALL	_findLargest
$02A6	$C000	F0AD			MOVFF	STACK_0, interrupt_maxmult_L1
;cnc_control.c,382 :: 			stepX = ( X_STEP_IN == 0 ) && ( currentSteps.F7 == 1 );
$02AA	$6A01	    			CLRF	STACK_1, 0
$02AC	$BE81	    			BTFSC	PORTB, 7, 0
$02AE	$2A01	    			INCF	STACK_1, 1, 0
$02B0	$5001	    			MOVF	STACK_1, 0, 0
$02B2	$0A00	    			XORLW	0
$02B4	$E10A	    			BNZ	L_interrupt_38
$02B6	$6A01	    			CLRF	STACK_1, 0
$02B8	$BE1D	    			BTFSC	_currentSteps, 7, 0
$02BA	$2A01	    			INCF	STACK_1, 1, 0
$02BC	$5001	    			MOVF	STACK_1, 0, 0
$02BE	$0A01	    			XORLW	1
$02C0	$E104	    			BNZ	L_interrupt_38
$02C2	$0E01	    			MOVLW	1
$02C4	$6E00	    			MOVWF	STACK_0, 0
$02C6	$EF66	F001			GOTO	L_interrupt_37
$02CA	$	L_interrupt_38:
$02CA	$6A00	    			CLRF	STACK_0, 0
$02CC	$	L_interrupt_37:
$02CC	$C000	F0AE			MOVFF	STACK_0, interrupt_stepX_L1
;cnc_control.c,383 :: 			stepY = ( Y_STEP_IN == 0 ) && ( currentSteps.F6 == 1 );
$02D0	$6A01	    			CLRF	STACK_1, 0
$02D2	$BC81	    			BTFSC	PORTB, 6, 0
$02D4	$2A01	    			INCF	STACK_1, 1, 0
$02D6	$5001	    			MOVF	STACK_1, 0, 0
$02D8	$0A00	    			XORLW	0
$02DA	$E10A	    			BNZ	L_interrupt_40
$02DC	$6A01	    			CLRF	STACK_1, 0
$02DE	$BC1D	    			BTFSC	_currentSteps, 6, 0
$02E0	$2A01	    			INCF	STACK_1, 1, 0
$02E2	$5001	    			MOVF	STACK_1, 0, 0
$02E4	$0A01	    			XORLW	1
$02E6	$E104	    			BNZ	L_interrupt_40
$02E8	$0E01	    			MOVLW	1
$02EA	$6E00	    			MOVWF	STACK_0, 0
$02EC	$EF79	F001			GOTO	L_interrupt_39
$02F0	$	L_interrupt_40:
$02F0	$6A00	    			CLRF	STACK_0, 0
$02F2	$	L_interrupt_39:
$02F2	$C000	F0AF			MOVFF	STACK_0, interrupt_stepY_L1
;cnc_control.c,384 :: 			stepZ = ( Z_STEP_IN == 0 ) && ( currentSteps.F5 == 1 );
$02F6	$6A01	    			CLRF	STACK_1, 0
$02F8	$BA81	    			BTFSC	PORTB, 5, 0
$02FA	$2A01	    			INCF	STACK_1, 1, 0
$02FC	$5001	    			MOVF	STACK_1, 0, 0
$02FE	$0A00	    			XORLW	0
$0300	$E10A	    			BNZ	L_interrupt_42
$0302	$6A01	    			CLRF	STACK_1, 0
$0304	$BA1D	    			BTFSC	_currentSteps, 5, 0
$0306	$2A01	    			INCF	STACK_1, 1, 0
$0308	$5001	    			MOVF	STACK_1, 0, 0
$030A	$0A01	    			XORLW	1
$030C	$E104	    			BNZ	L_interrupt_42
$030E	$0E01	    			MOVLW	1
$0310	$6E00	    			MOVWF	STACK_0, 0
$0312	$EF8C	F001			GOTO	L_interrupt_41
$0316	$	L_interrupt_42:
$0316	$6A00	    			CLRF	STACK_0, 0
$0318	$	L_interrupt_41:
$0318	$C000	F0B0			MOVFF	STACK_0, interrupt_stepZ_L1
;cnc_control.c,385 :: 			stepA = ( A_STEP_IN == 0 ) && ( currentSteps.F4 == 1 );
$031C	$6A01	    			CLRF	STACK_1, 0
$031E	$B881	    			BTFSC	PORTB, 4, 0
$0320	$2A01	    			INCF	STACK_1, 1, 0
$0322	$5001	    			MOVF	STACK_1, 0, 0
$0324	$0A00	    			XORLW	0
$0326	$E10A	    			BNZ	L_interrupt_44
$0328	$6A01	    			CLRF	STACK_1, 0
$032A	$B81D	    			BTFSC	_currentSteps, 4, 0
$032C	$2A01	    			INCF	STACK_1, 1, 0
$032E	$5001	    			MOVF	STACK_1, 0, 0
$0330	$0A01	    			XORLW	1
$0332	$E104	    			BNZ	L_interrupt_44
$0334	$0E01	    			MOVLW	1
$0336	$6E00	    			MOVWF	STACK_0, 0
$0338	$EF9F	F001			GOTO	L_interrupt_43
$033C	$	L_interrupt_44:
$033C	$6A00	    			CLRF	STACK_0, 0
$033E	$	L_interrupt_43:
$033E	$C000	F0B1			MOVFF	STACK_0, interrupt_stepA_L1
;cnc_control.c,388 :: 			for ( i=0;i<maxmult;i++ ){
$0342	$0100	    			MOVLB	0
$0344	$6BAC	    			CLRF	interrupt_i_L1, 1
$0346	$	L_interrupt_45:
$0346	$0100	    			MOVLB	0
$0348	$51AD	    			MOVF	interrupt_maxmult_L1, 0, 1
$034A	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$034C	$E24A	    			BC	L_interrupt_46
;cnc_control.c,391 :: 			if (  (stepX == 1 ) && (i < multipliers.x ) ){
$034E	$51AE	    			MOVF	interrupt_stepX_L1, 0, 1
$0350	$0A01	    			XORLW	1
$0352	$E104	    			BNZ	L_interrupt_50
$0354	$5016	    			MOVF	_multipliers+0, 0, 0
$0356	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$0358	$A0D8	    			BTFSS	STATUS, C, 0
$035A	$	L379_ex_L_interrupt_50:
;cnc_control.c,392 :: 			X_STEP_OUT = 1;
$035A	$8082	    			BSF	PORTC, 0, 0
;cnc_control.c,393 :: 			}
$035C	$	L_interrupt_50:
;cnc_control.c,394 :: 			if ( (stepY == 1 ) && (i < multipliers.y ) ){
$035C	$0100	    			MOVLB	0
$035E	$51AF	    			MOVF	interrupt_stepY_L1, 0, 1
$0360	$0A01	    			XORLW	1
$0362	$E104	    			BNZ	L_interrupt_53
$0364	$5017	    			MOVF	_multipliers+1, 0, 0
$0366	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$0368	$A0D8	    			BTFSS	STATUS, C, 0
$036A	$	L392_ex_L_interrupt_53:
;cnc_control.c,395 :: 			Y_STEP_OUT = 1;
$036A	$8282	    			BSF	PORTC, 1, 0
;cnc_control.c,396 :: 			}
$036C	$	L_interrupt_53:
;cnc_control.c,397 :: 			if ( (stepZ == 1 ) && (i < multipliers.z ) ){
$036C	$0100	    			MOVLB	0
$036E	$51B0	    			MOVF	interrupt_stepZ_L1, 0, 1
$0370	$0A01	    			XORLW	1
$0372	$E104	    			BNZ	L_interrupt_56
$0374	$5018	    			MOVF	_multipliers+2, 0, 0
$0376	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$0378	$A0D8	    			BTFSS	STATUS, C, 0
$037A	$	L405_ex_L_interrupt_56:
;cnc_control.c,398 :: 			Z_STEP_OUT = 1;
$037A	$8482	    			BSF	PORTC, 2, 0
;cnc_control.c,399 :: 			}
$037C	$	L_interrupt_56:
;cnc_control.c,400 :: 			if ( ( stepA == 1) && (i < multipliers.a ) ){
$037C	$0100	    			MOVLB	0
$037E	$51B1	    			MOVF	interrupt_stepA_L1, 0, 1
$0380	$0A01	    			XORLW	1
$0382	$E104	    			BNZ	L_interrupt_59
$0384	$5019	    			MOVF	_multipliers+3, 0, 0
$0386	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$0388	$A0D8	    			BTFSS	STATUS, C, 0
$038A	$	L418_ex_L_interrupt_59:
;cnc_control.c,401 :: 			A_STEP_OUT = 1;
$038A	$8682	    			BSF	PORTC, 3, 0
;cnc_control.c,402 :: 			}
$038C	$	L_interrupt_59:
;cnc_control.c,405 :: 			delay5ClockCycles(multipliers.stepLengthCycles);
$038C	$C01C	F0B6			MOVFF	_multipliers+6, FARG_delay5ClockCycles+0
$0390	$ECFA	F000			CALL	_delay5ClockCycles
;cnc_control.c,408 :: 			if (  (stepX == 1 ) && (i < multipliers.x ) ){
$0394	$0100	    			MOVLB	0
$0396	$51AE	    			MOVF	interrupt_stepX_L1, 0, 1
$0398	$0A01	    			XORLW	1
$039A	$E104	    			BNZ	L_interrupt_62
$039C	$5016	    			MOVF	_multipliers+0, 0, 0
$039E	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$03A0	$A0D8	    			BTFSS	STATUS, C, 0
$03A2	$	L433_ex_L_interrupt_62:
;cnc_control.c,409 :: 			X_STEP_OUT = 0;
$03A2	$9082	    			BCF	PORTC, 0, 0
;cnc_control.c,410 :: 			}
$03A4	$	L_interrupt_62:
;cnc_control.c,411 :: 			if ( (stepY == 1 ) && (i < multipliers.y ) ){
$03A4	$0100	    			MOVLB	0
$03A6	$51AF	    			MOVF	interrupt_stepY_L1, 0, 1
$03A8	$0A01	    			XORLW	1
$03AA	$E104	    			BNZ	L_interrupt_65
$03AC	$5017	    			MOVF	_multipliers+1, 0, 0
$03AE	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$03B0	$A0D8	    			BTFSS	STATUS, C, 0
$03B2	$	L446_ex_L_interrupt_65:
;cnc_control.c,412 :: 			Y_STEP_OUT = 0;
$03B2	$9282	    			BCF	PORTC, 1, 0
;cnc_control.c,413 :: 			}
$03B4	$	L_interrupt_65:
;cnc_control.c,414 :: 			if ( (stepZ == 1 ) && (i < multipliers.z ) ){
$03B4	$0100	    			MOVLB	0
$03B6	$51B0	    			MOVF	interrupt_stepZ_L1, 0, 1
$03B8	$0A01	    			XORLW	1
$03BA	$E104	    			BNZ	L_interrupt_68
$03BC	$5018	    			MOVF	_multipliers+2, 0, 0
$03BE	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$03C0	$A0D8	    			BTFSS	STATUS, C, 0
$03C2	$	L459_ex_L_interrupt_68:
;cnc_control.c,415 :: 			Z_STEP_OUT = 0;
$03C2	$9482	    			BCF	PORTC, 2, 0
;cnc_control.c,416 :: 			}
$03C4	$	L_interrupt_68:
;cnc_control.c,417 :: 			if ( ( stepA == 1) && (i < multipliers.a ) ){
$03C4	$0100	    			MOVLB	0
$03C6	$51B1	    			MOVF	interrupt_stepA_L1, 0, 1
$03C8	$0A01	    			XORLW	1
$03CA	$E104	    			BNZ	L_interrupt_71
$03CC	$5019	    			MOVF	_multipliers+3, 0, 0
$03CE	$5DAC	    			SUBWF	interrupt_i_L1, 0, 1
$03D0	$A0D8	    			BTFSS	STATUS, C, 0
$03D2	$	L472_ex_L_interrupt_71:
;cnc_control.c,418 :: 			A_STEP_OUT = 0;
$03D2	$9682	    			BCF	PORTC, 3, 0
;cnc_control.c,419 :: 			}
$03D4	$	L_interrupt_71:
;cnc_control.c,422 :: 			delay5ClockCycles(multipliers.delayCycles);
$03D4	$C01B	F0B6			MOVFF	_multipliers+5, FARG_delay5ClockCycles+0
$03D8	$ECFA	F000			CALL	_delay5ClockCycles
;cnc_control.c,423 :: 			}
$03DC	$	L_interrupt_47:
;cnc_control.c,388 :: 			for ( i=0;i<maxmult;i++ ){
$03DC	$0100	    			MOVLB	0
$03DE	$2BAC	    			INCF	interrupt_i_L1, 1, 1
;cnc_control.c,423 :: 			}
$03E0	$D7B2	    			BRA	L_interrupt_45
$03E2	$	L_interrupt_46:
;cnc_control.c,426 :: 			currentSteps = PORTB;
$03E2	$CF81	F01D			MOVFF	PORTB, _currentSteps
;cnc_control.c,427 :: 			INTCON.RBIF = 0;
$03E6	$90F2	    			BCF	INTCON, 0, 0
;cnc_control.c,428 :: 			}
$03E8	$	L_interrupt_34:
;cnc_control.c,429 :: 			}
$03E8	$	L_Interrupt_end:
$03E8	$0100	    			MOVLB	0
$03EA	$C0B2	FFE9			MOVFF	?saveFSR0, FSR0L
$03EE	$C0B3	FFEA			MOVFF	?saveFSR0+1, FSR0H
$03F2	$C0B4	FFE1			MOVFF	?saveFSR1, FSR1L
$03F6	$C0B5	FFE2			MOVFF	?saveFSR1+1, FSR1H
$03FA	$C160	F001			MOVFF	STSAVED_1, STACK_1
$03FE	$C15F	F000			MOVFF	STSAVED_0, STACK_0
$0402	$0011	    			RETFIE
$0018	$	_interrupt_low:
$0018	$CFF8	F15E			MOVFF	TBLPTRL+2, LOW_TBLPTRSAVED_2
$001C	$CFF7	F15D			MOVFF	TBLPTRL+1, LOW_TBLPTRSAVED_1
$0020	$CFF6	F15C			MOVFF	TBLPTRL+0, LOW_TBLPTRSAVED_0
$0024	$C001	F162			MOVFF	STACK_1, LOW_STSAVED_1
$0028	$C000	F161			MOVFF	STACK_0, LOW_STSAVED_0
$002C	$CFE8	F0BB			MOVFF	WREG, ?Low_saveWERG
$0030	$CFD8	F0BC			MOVFF	STATUS, ?Low_saveSTATUS
$0034	$CFE0	F0BD			MOVFF	BSR, ?Low_saveBSR
$0038	$CFE9	F0B2			MOVFF	FSR0L, ?saveFSR0
$003C	$CFEA	F0B3			MOVFF	FSR0H, ?saveFSR0+1
$0040	$CFE1	F0B4			MOVFF	FSR1L, ?saveFSR1
$0044	$CFE2	F0B5			MOVFF	FSR1H, ?saveFSR1+1
;cnc_control.c,431 :: 			void interrupt_low ( void ) {
;cnc_control.c,432 :: 			if ( INTCON.TMR0IF ){
$0048	$A4F2	    			BTFSS	INTCON, 2, 0
$004A	$D08C	    			BRA	L_interrupt_low_72
;cnc_control.c,436 :: 			unsigned short enable = 1;
$004C	$0E01	    			MOVLW	1
$004E	$0100	    			MOVLB	0
$0050	$6FBA	    			MOVWF	interrupt_low_enable_L1, 1
;cnc_control.c,438 :: 			if ( LIMIT_IN == 0 ){
$0052	$6A01	    			CLRF	STACK_1, 0
$0054	$BE83	    			BTFSC	PORTD, 7, 0
$0056	$2A01	    			INCF	STACK_1, 1, 0
$0058	$5001	    			MOVF	STACK_1, 0, 0
$005A	$0A00	    			XORLW	0
$005C	$E110	    			BNZ	L_interrupt_low_73
;cnc_control.c,439 :: 			enable = 0;
$005E	$6BBA	    			CLRF	interrupt_low_enable_L1, 1
;cnc_control.c,440 :: 			*currentStatus = *msg_atLimits;
$0060	$C020	FFF6			MOVFF	_msg_atLimits, TBLPTRL
$0064	$C021	FFF7			MOVFF	_msg_atLimits+1, TBLPTRH
$0068	$C022	FFF8			MOVFF	_msg_atLimits+2, TBLPTRU
$006C	$0009	    			TBLRD*+
$006E	$CFF5	F000			MOVFF	TABLAT, STACK_0
$0072	$C01E	FFE1			MOVFF	_currentStatus, FSR1L
$0076	$C01F	FFE2			MOVFF	_currentStatus+1, FSR1H
$007A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;cnc_control.c,441 :: 			}
$007E	$	L_interrupt_low_73:
;cnc_control.c,442 :: 			if ( ESTOP_IN == 0 ){
$007E	$6A01	    			CLRF	STACK_1, 0
$0080	$BC83	    			BTFSC	PORTD, 6, 0
$0082	$2A01	    			INCF	STACK_1, 1, 0
$0084	$5001	    			MOVF	STACK_1, 0, 0
$0086	$0A00	    			XORLW	0
$0088	$E111	    			BNZ	L_interrupt_low_74
;cnc_control.c,443 :: 			enable = 0;
$008A	$0100	    			MOVLB	0
$008C	$6BBA	    			CLRF	interrupt_low_enable_L1, 1
;cnc_control.c,444 :: 			*currentStatus = *msg_eStop;
$008E	$C023	FFF6			MOVFF	_msg_eStop, TBLPTRL
$0092	$C024	FFF7			MOVFF	_msg_eStop+1, TBLPTRH
$0096	$C025	FFF8			MOVFF	_msg_eStop+2, TBLPTRU
$009A	$0009	    			TBLRD*+
$009C	$CFF5	F000			MOVFF	TABLAT, STACK_0
$00A0	$C01E	FFE1			MOVFF	_currentStatus, FSR1L
$00A4	$C01F	FFE2			MOVFF	_currentStatus+1, FSR1H
$00A8	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;cnc_control.c,445 :: 			}
$00AC	$	L_interrupt_low_74:
;cnc_control.c,447 :: 			if ( PC_ENABLE_IN == 0 ){
$00AC	$6A01	    			CLRF	STACK_1, 0
$00AE	$BA83	    			BTFSC	PORTD, 5, 0
$00B0	$2A01	    			INCF	STACK_1, 1, 0
$00B2	$5001	    			MOVF	STACK_1, 0, 0
$00B4	$0A00	    			XORLW	0
$00B6	$E111	    			BNZ	L_interrupt_low_75
;cnc_control.c,448 :: 			enable = 0;
$00B8	$0100	    			MOVLB	0
$00BA	$6BBA	    			CLRF	interrupt_low_enable_L1, 1
;cnc_control.c,449 :: 			*currentStatus = *msg_disabled;
$00BC	$C026	FFF6			MOVFF	_msg_disabled, TBLPTRL
$00C0	$C027	FFF7			MOVFF	_msg_disabled+1, TBLPTRH
$00C4	$C028	FFF8			MOVFF	_msg_disabled+2, TBLPTRU
$00C8	$0009	    			TBLRD*+
$00CA	$CFF5	F000			MOVFF	TABLAT, STACK_0
$00CE	$C01E	FFE1			MOVFF	_currentStatus, FSR1L
$00D2	$C01F	FFE2			MOVFF	_currentStatus+1, FSR1H
$00D6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;cnc_control.c,450 :: 			}
$00DA	$	L_interrupt_low_75:
;cnc_control.c,451 :: 			if ( A_ENABLE_IN == 0 || Z_ENABLE_IN == 0 || Y_ENABLE_IN == 0
$00DA	$0100	    			MOVLB	0
$00DC	$6A01	    			CLRF	STACK_1, 0
$00DE	$B883	    			BTFSC	PORTD, 4, 0
$00E0	$2A01	    			INCF	STACK_1, 1, 0
$00E2	$5001	    			MOVF	STACK_1, 0, 0
$00E4	$0A00	    			XORLW	0
$00E6	$E012	    			BZ	L470_ex_L_interrupt_low_78
$00E8	$6A01	    			CLRF	STACK_1, 0
$00EA	$B683	    			BTFSC	PORTD, 3, 0
$00EC	$2A01	    			INCF	STACK_1, 1, 0
$00EE	$5001	    			MOVF	STACK_1, 0, 0
$00F0	$0A00	    			XORLW	0
$00F2	$E00C	    			BZ	L470_ex_L_interrupt_low_78
$00F4	$6A01	    			CLRF	STACK_1, 0
$00F6	$B483	    			BTFSC	PORTD, 2, 0
$00F8	$2A01	    			INCF	STACK_1, 1, 0
$00FA	$5001	    			MOVF	STACK_1, 0, 0
$00FC	$0A00	    			XORLW	0
$00FE	$E006	    			BZ	L470_ex_L_interrupt_low_78
;cnc_control.c,452 :: 			|| X_ENABLE_IN == 0 ){
$0100	$6A01	    			CLRF	STACK_1, 0
$0102	$B283	    			BTFSC	PORTD, 1, 0
$0104	$2A01	    			INCF	STACK_1, 1, 0
$0106	$5001	    			MOVF	STACK_1, 0, 0
$0108	$0A00	    			XORLW	0
$010A	$E111	    			BNZ	L_interrupt_low_78
$010C	$	L470_ex_L_interrupt_low_78:
;cnc_control.c,453 :: 			enable = 0;
$010C	$0100	    			MOVLB	0
$010E	$6BBA	    			CLRF	interrupt_low_enable_L1, 1
;cnc_control.c,454 :: 			*currentStatus = *msg_servoFault;
$0110	$C029	FFF6			MOVFF	_msg_servoFault, TBLPTRL
$0114	$C02A	FFF7			MOVFF	_msg_servoFault+1, TBLPTRH
$0118	$C02B	FFF8			MOVFF	_msg_servoFault+2, TBLPTRU
$011C	$0009	    			TBLRD*+
$011E	$CFF5	F000			MOVFF	TABLAT, STACK_0
$0122	$C01E	FFE1			MOVFF	_currentStatus, FSR1L
$0126	$C01F	FFE2			MOVFF	_currentStatus+1, FSR1H
$012A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;cnc_control.c,455 :: 			}
$012E	$	L_interrupt_low_78:
;cnc_control.c,457 :: 			if ( enable == 1 ){
$012E	$0100	    			MOVLB	0
$0130	$51BA	    			MOVF	interrupt_low_enable_L1, 0, 1
$0132	$0A01	    			XORLW	1
$0134	$E112	    			BNZ	L_interrupt_low_79
;cnc_control.c,458 :: 			*currentStatus = *msg_ok;
$0136	$C02C	FFF6			MOVFF	_msg_ok, TBLPTRL
$013A	$C02D	FFF7			MOVFF	_msg_ok+1, TBLPTRH
$013E	$C02E	FFF8			MOVFF	_msg_ok+2, TBLPTRU
$0142	$0009	    			TBLRD*+
$0144	$CFF5	F000			MOVFF	TABLAT, STACK_0
$0148	$C01E	FFE1			MOVFF	_currentStatus, FSR1L
$014C	$C01F	FFE2			MOVFF	_currentStatus+1, FSR1H
$0150	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;cnc_control.c,459 :: 			MACHINE_ERROR_OUT  = 0;
$0154	$9882	    			BCF	PORTC, 4, 0
;cnc_control.c,460 :: 			SPINDLE_ENABLE_OUT  = 1;
$0156	$8A82	    			BSF	PORTC, 5, 0
;cnc_control.c,461 :: 			}
$0158	$D002	    			BRA	L_interrupt_low_80
$015A	$	L_interrupt_low_79:
;cnc_control.c,463 :: 			MACHINE_ERROR_OUT  = 1;
$015A	$8882	    			BSF	PORTC, 4, 0
;cnc_control.c,464 :: 			SPINDLE_ENABLE_OUT  = 0;
$015C	$9A82	    			BCF	PORTC, 5, 0
;cnc_control.c,465 :: 			}
$015E	$	L_interrupt_low_80:
;cnc_control.c,466 :: 			statusError = enable;
$015E	$C0BA	F015			MOVFF	interrupt_low_enable_L1, _statusError
;cnc_control.c,467 :: 			INTCON.TMR0IF = 0;
$0162	$94F2	    			BCF	INTCON, 2, 0
;cnc_control.c,468 :: 			}
$0164	$	L_interrupt_low_72:
;cnc_control.c,470 :: 			}
$0164	$	L_Low_Interrupt_end:
$0164	$0100	    			MOVLB	0
$0166	$C0BB	FFE8			MOVFF	?Low_saveWERG, WREG
$016A	$C0BC	FFD8			MOVFF	?Low_saveSTATUS, STATUS
$016E	$C0BD	FFE0			MOVFF	?Low_saveBSR, BSR
$0172	$C0B2	FFE9			MOVFF	?saveFSR0, FSR0L
$0176	$C0B3	FFEA			MOVFF	?saveFSR0+1, FSR0H
$017A	$C0B4	FFE1			MOVFF	?saveFSR1, FSR1L
$017E	$C0B5	FFE2			MOVFF	?saveFSR1+1, FSR1H
$0182	$CFF8	F15E			MOVFF	TBLPTRL+2, LOW_TBLPTRSAVED_2
$0186	$CFF7	F15D			MOVFF	TBLPTRL+1, LOW_TBLPTRSAVED_1
$018A	$CFF6	F15C			MOVFF	TBLPTRL+0, LOW_TBLPTRSAVED_0
$018E	$C162	F001			MOVFF	LOW_STSAVED_1, STACK_1
$0192	$C161	F000			MOVFF	LOW_STSAVED_0, STACK_0
$0196	$0010	    			RETFIE	0
$0404	$	_RES032:
$0404	$0100	    			MOVLB	0
$0406	$6A02	    			CLRF	STACK_2, 0
$0408	$6A01	    			CLRF	STACK_1, 0
$040A	$6A00	    			CLRF	STACK_0, 0
$040C	$6A08	    			CLRF	STACK_8, 0
$040E	$6A03	    			CLRF	STACK_3, 0
$0410	$0E00	    			MOVLW	0
$0412	$0012	    			RETURN
$0414	$	_SETFOV32:
$0414	$0100	    			MOVLB	0
$0416	$820B	    			BSF	STACK_11, 1, 0
$0418	$AE0B	    			BTFSS	STACK_11, 7, 0
$041A	$EF15	F002			GOTO	SETFOV32EEE
$041E	$6803	    			SETF	STACK_3, 0
$0420	$6802	    			SETF	STACK_2, 0
$0422	$6801	    			SETF	STACK_1, 0
$0424	$6800	    			SETF	STACK_0, 0
$0426	$360A	    			RLCF	STACK_10, F, 0
$0428	$3202	    			RRCF	STACK_2, F, 0
$042A	$	SETFOV32EEE:
$042A	$0EFF	    			MOVLW	0xFF
$042C	$0012	    			RETURN
$042E	$	_SETFUN32:
$042E	$0100	    			MOVLB	0
$0430	$840B	    			BSF	STACK_11, 2, 0
$0432	$AE0B	    			BTFSS	STACK_11, 7, 0
$0434	$EF23	F002			GOTO	SETFUN32EEE
$0438	$0E01	    			MOVLW	0x01
$043A	$6E03	    			MOVWF	STACK_3, 0
$043C	$6A02	    			CLRF	STACK_2, 0
$043E	$6A01	    			CLRF	STACK_1, 0
$0440	$6A00	    			CLRF	STACK_0, 0
$0442	$360A	    			RLCF	STACK_10, F, 0
$0444	$3202	    			RRCF	STACK_2, F, 0
$0446	$	SETFUN32EEE:
$0446	$0EFF	    			MOVLW	0xFF
$0448	$0012	    			RETURN
$044A	$	_Usart_Write:
$044A	$	L_Usart_Write_3:
$044A	$6A01	    			CLRF	STACK_1, 0
$044C	$B2AC	    			BTFSC	TXSTA, 1, 0
$044E	$2A01	    			INCF	STACK_1, 1, 0
$0450	$5001	    			MOVF	STACK_1, 0, 0
$0452	$0A00	    			XORLW	0
$0454	$E102	    			BNZ	L_Usart_Write_4
$0456	$0000	    			NOP
$0458	$D7F8	    			BRA	L_Usart_Write_3
$045A	$	L_Usart_Write_4:
$045A	$C156	FFAD			MOVFF	FARG_Usart_Write+0, TXREG
$045E	$0012	    			RETURN
$0460	$	_strcpy:
$0460	$C156	F15A			MOVFF	FARG_strcpy+0, strcpy_cp_L0
$0464	$C157	F15B			MOVFF	FARG_strcpy+1, strcpy_cp_L0+1
$0468	$	L_strcpy_31:
$0468	$C15A	F002			MOVFF	strcpy_cp_L0, STACK_2
$046C	$C15B	F003			MOVFF	strcpy_cp_L0+1, STACK_2+1
$0470	$0101	    			MOVLB	1
$0472	$4B5A	    			INFSNZ	strcpy_cp_L0, 1, 1
$0474	$2B5B	    			INCF	strcpy_cp_L0+1, 1, 1
$0476	$C158	FFE9			MOVFF	FARG_strcpy+2, FSR0L
$047A	$C159	FFEA			MOVFF	FARG_strcpy+3, FSR0L+1
$047E	$4B58	    			INFSNZ	FARG_strcpy+2, 1, 1
$0480	$2B59	    			INCF	FARG_strcpy+3, 1, 1
$0482	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$0486	$C002	FFE1			MOVFF	STACK_2, FSR1L
$048A	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$048E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0492	$C002	FFE9			MOVFF	STACK_2, FSR0L
$0496	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$049A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$049E	$5200	    			MOVF	STACK_0, 1, 0
$04A0	$E1E3	    			BNZ	L_strcpy_31
$04A2	$	L_strcpy_32:
$04A2	$C156	F000			MOVFF	FARG_strcpy+0, STACK_0
$04A6	$C157	F001			MOVFF	FARG_strcpy+1, STACK_0+1
$04AA	$0012	    			RETURN
$04AC	$	_Compare_Double:
$04AC	$0100	    			MOVLB	0
$04AE	$6A0A	    			CLRF	STACK_10, 0
$04B0	$5003	    			MOVF	STACK_3, W, 0
$04B2	$A4D8	    			BTFSS	STATUS, Z, 0
$04B4	$800A	    			BSF	STACK_10, 0, 0
$04B6	$5007	    			MOVF	STACK_7, W, 0
$04B8	$A4D8	    			BTFSS	STATUS, Z, 0
$04BA	$820A	    			BSF	STACK_10, 1, 0
$04BC	$500A	    			MOVF	STACK_10, W, 0
$04BE	$B4D8	    			BTFSC	STATUS, Z, 0
$04C0	$EFBA	F002			GOTO	COMPARE_EQU
$04C4	$0A03	    			XORLW	0x03
$04C6	$B4D8	    			BTFSC	STATUS, Z, 0
$04C8	$EF73	F002			GOTO	COMPARE_NOTZERO
$04CC	$B00A	    			BTFSC	STACK_10, 0, 0
$04CE	$EF6E	F002			GOTO	COMPARE_XNOTZERO
$04D2	$	COMPARE_YNOTZERO:
$04D2	$AE06	    			BTFSS	STACK_6, 7, 0
$04D4	$EFB8	F002			GOTO	COMPARE_LT
$04D8	$EFB6	F002			GOTO	COMPARE_GT
$04DC	$	COMPARE_XNOTZERO:
$04DC	$AE02	    			BTFSS	STACK_2, 7, 0
$04DE	$EFB6	F002			GOTO	COMPARE_GT
$04E2	$EFB8	F002			GOTO	COMPARE_LT
$04E6	$	COMPARE_NOTZERO:
$04E6	$5002	    			MOVF	STACK_2, W, 0
$04E8	$0B80	    			ANDLW	0x80
$04EA	$6E0A	    			MOVWF	STACK_10, 0
$04EC	$9E02	    			BCF	STACK_2, 7, 0
$04EE	$5006	    			MOVF	STACK_6, W, 0
$04F0	$0B80	    			ANDLW	0x80
$04F2	$9E06	    			BCF	STACK_6, 7, 0
$04F4	$180A	    			XORWF	STACK_10, W, 0
$04F6	$B4D8	    			BTFSC	STATUS, Z, 0
$04F8	$EF84	F002			GOTO	COMPARE_TESTALL
$04FC	$500A	    			MOVF	STACK_10, W, 0
$04FE	$B4D8	    			BTFSC	STATUS, Z, 0
$0500	$EFB6	F002			GOTO	COMPARE_GT
$0504	$EFB8	F002			GOTO	COMPARE_LT
$0508	$	COMPARE_TESTALL:
$0508	$5007	    			MOVF	STACK_7, W, 0
$050A	$5C03	    			SUBWF	STACK_3, W, 0
$050C	$B4D8	    			BTFSC	STATUS, Z, 0
$050E	$EF8E	F002			GOTO	COMPARE_C1
$0512	$A0D8	    			BTFSS	STATUS, C, 0
$0514	$EFAA	F002			GOTO	GT_FALSE
$0518	$EFB0	F002			GOTO	GT_TRUE
$051C	$	COMPARE_C1:
$051C	$5006	    			MOVF	STACK_6, W, 0
$051E	$5C02	    			SUBWF	STACK_2, W, 0
$0520	$B4D8	    			BTFSC	STATUS, Z, 0
$0522	$EF98	F002			GOTO	COMPARE_C2
$0526	$A0D8	    			BTFSS	STATUS, C, 0
$0528	$EFAA	F002			GOTO	GT_FALSE
$052C	$EFB0	F002			GOTO	GT_TRUE
$0530	$	COMPARE_C2:
$0530	$5005	    			MOVF	STACK_5, W, 0
$0532	$5C01	    			SUBWF	STACK_1, W, 0
$0534	$B4D8	    			BTFSC	STATUS, Z, 0
$0536	$EFA2	F002			GOTO	COMPARE_C3
$053A	$A0D8	    			BTFSS	STATUS, C, 0
$053C	$EFAA	F002			GOTO	GT_FALSE
$0540	$EFB0	F002			GOTO	GT_TRUE
$0544	$	COMPARE_C3:
$0544	$5004	    			MOVF	STACK_4, W, 0
$0546	$5C00	    			SUBWF	STACK_0, W, 0
$0548	$B4D8	    			BTFSC	STATUS, Z, 0
$054A	$EFBA	F002			GOTO	COMPARE_EQU
$054E	$B0D8	    			BTFSC	STATUS, C, 0
$0550	$EFB0	F002			GOTO	GT_TRUE
$0554	$	GT_FALSE:
$0554	$520A	    			MOVF	STACK_10, F, 0
$0556	$B4D8	    			BTFSC	STATUS, Z, 0
$0558	$EFB8	F002			GOTO	COMPARE_LT
$055C	$EFB6	F002			GOTO	COMPARE_GT
$0560	$	GT_TRUE:
$0560	$520A	    			MOVF	STACK_10, F, 0
$0562	$B4D8	    			BTFSC	STATUS, Z, 0
$0564	$EFB6	F002			GOTO	COMPARE_GT
$0568	$EFB8	F002			GOTO	COMPARE_LT
$056C	$	COMPARE_GT:
$056C	$80D8	    			BSF	STATUS, C, 0
$056E	$0012	    			RETURN
$0570	$	COMPARE_LT:
$0570	$90D8	    			BCF	STATUS, C, 0
$0572	$0012	    			RETURN
$0574	$	COMPARE_EQU:
$0574	$80D8	    			BSF	STATUS, C, 0
$0576	$84D8	    			BSF	STATUS, Z, 0
$0578	$0012	    			RETURN
$057A	$0012	    			RETURN
$057C	$	_Mul_32x32_FP:
$057C	$0100	    			MOVLB	0
$057E	$	FPM32:
$057E	$6A08	    			CLRF	STACK_8, 0
$0580	$6A09	    			CLRF	STACK_9, 0
$0582	$0E00	    			MOVLW	0x00
$0584	$6207	    			CPFSEQ	STACK_7, 0
$0586	$6403	    			CPFSGT	STACK_3, 0
$0588	$EF44	F003			GOTO	MULJPRES032
$058C	$	M32BNE0:
$058C	$5002	    			MOVF	STACK_2, W, 0
$058E	$1806	    			XORWF	STACK_6, W, 0
$0590	$6E0A	    			MOVWF	STACK_10, 0
$0592	$5007	    			MOVF	STACK_7, W, 0
$0594	$2603	    			ADDWF	STACK_3, F, 0
$0596	$0E7E	    			MOVLW	126
$0598	$A0D8	    			BTFSS	STATUS, C, 0
$059A	$EFD5	F002			GOTO	MTUN32
$059E	$5E03	    			SUBWF	STACK_3, F, 0
$05A0	$B0D8	    			BTFSC	STATUS, C, 0
$05A2	$EF49	F003			GOTO	MULJPSETFOV32
$05A6	$EFD9	F002			GOTO	MOK32
$05AA	$	MTUN32:
$05AA	$5E03	    			SUBWF	STACK_3, F, 0
$05AC	$A0D8	    			BTFSS	STATUS, C, 0
$05AE	$EF4E	F003			GOTO	MULJPSETFUN32
$05B2	$	MOK32:
$05B2	$8E02	    			BSF	STACK_2, 7, 0
$05B4	$8E06	    			BSF	STACK_6, 7, 0
$05B6	$C002	F00E			MOVFF	STACK_2, STACK_14
$05BA	$C001	F00B			MOVFF	STACK_1, STACK_11
$05BE	$C000	F00D			MOVFF	STACK_0, STACK_13
$05C2	$5000	    			MOVF	STACK_0, W, 0
$05C4	$0204	    			MULWF	STACK_4, 0
$05C6	$CFF4	F00C			MOVFF	PRODH, STACK_12
$05CA	$5001	    			MOVF	STACK_1, W, 0
$05CC	$0205	    			MULWF	STACK_5, 0
$05CE	$CFF4	F000			MOVFF	PRODH, STACK_0
$05D2	$CFF3	F008			MOVFF	PRODL, STACK_8
$05D6	$0204	    			MULWF	STACK_4, 0
$05D8	$50F3	    			MOVF	PRODL, W, 0
$05DA	$260C	    			ADDWF	STACK_12, F, 0
$05DC	$50F4	    			MOVF	PRODH, W, 0
$05DE	$2208	    			ADDWFC	STACK_8, F, 0
$05E0	$0E00	    			MOVLW	0x00
$05E2	$2200	    			ADDWFC	STACK_0, F, 0
$05E4	$500D	    			MOVF	STACK_13, W, 0
$05E6	$0205	    			MULWF	STACK_5, 0
$05E8	$50F3	    			MOVF	PRODL, W, 0
$05EA	$260C	    			ADDWF	STACK_12, F, 0
$05EC	$50F4	    			MOVF	PRODH, W, 0
$05EE	$2208	    			ADDWFC	STACK_8, F, 0
$05F0	$0E00	    			MOVLW	0x00
$05F2	$2200	    			ADDWFC	STACK_0, F, 0
$05F4	$5002	    			MOVF	STACK_2, W, 0
$05F6	$0204	    			MULWF	STACK_4, 0
$05F8	$50F3	    			MOVF	PRODL, W, 0
$05FA	$2608	    			ADDWF	STACK_8, F, 0
$05FC	$50F4	    			MOVF	PRODH, W, 0
$05FE	$2200	    			ADDWFC	STACK_0, F, 0
$0600	$5002	    			MOVF	STACK_2, W, 0
$0602	$0205	    			MULWF	STACK_5, 0
$0604	$6A01	    			CLRF	STACK_1, 0
$0606	$0E00	    			MOVLW	0x00
$0608	$2201	    			ADDWFC	STACK_1, F, 0
$060A	$50F3	    			MOVF	PRODL, W, 0
$060C	$2600	    			ADDWF	STACK_0, F, 0
$060E	$50F4	    			MOVF	PRODH, W, 0
$0610	$2201	    			ADDWFC	STACK_1, F, 0
$0612	$500D	    			MOVF	STACK_13, W, 0
$0614	$0206	    			MULWF	STACK_6, 0
$0616	$50F3	    			MOVF	PRODL, W, 0
$0618	$2608	    			ADDWF	STACK_8, F, 0
$061A	$50F4	    			MOVF	PRODH, W, 0
$061C	$2200	    			ADDWFC	STACK_0, F, 0
$061E	$6A02	    			CLRF	STACK_2, 0
$0620	$0E00	    			MOVLW	0x00
$0622	$2201	    			ADDWFC	STACK_1, F, 0
$0624	$2202	    			ADDWFC	STACK_2, F, 0
$0626	$500B	    			MOVF	STACK_11, W, 0
$0628	$0206	    			MULWF	STACK_6, 0
$062A	$50F3	    			MOVF	PRODL, W, 0
$062C	$2600	    			ADDWF	STACK_0, F, 0
$062E	$50F4	    			MOVF	PRODH, W, 0
$0630	$2201	    			ADDWFC	STACK_1, F, 0
$0632	$0E00	    			MOVLW	0x00
$0634	$2202	    			ADDWFC	STACK_2, F, 0
$0636	$500E	    			MOVF	STACK_14, W, 0
$0638	$0206	    			MULWF	STACK_6, 0
$063A	$50F3	    			MOVF	PRODL, W, 0
$063C	$2601	    			ADDWF	STACK_1, F, 0
$063E	$50F4	    			MOVF	PRODH, W, 0
$0640	$2202	    			ADDWFC	STACK_2, F, 0
$0642	$BE02	    			BTFSC	STACK_2, 7, 0
$0644	$EF2C	F003			GOTO	MROUND32
$0648	$3608	    			RLCF	STACK_8, F, 0
$064A	$3600	    			RLCF	STACK_0, F, 0
$064C	$3601	    			RLCF	STACK_1, F, 0
$064E	$3602	    			RLCF	STACK_2, F, 0
$0650	$0603	    			DECF	STACK_3, F, 0
$0652	$B4D8	    			BTFSC	STATUS, Z, 0
$0654	$EF4E	F003			GOTO	MULJPSETFUN32
$0658	$	MROUND32:
$0658	$EF3F	F003			GOTO	MUL32OK
$065C	$80D8	    			BSF	STATUS, C, 0
$065E	$0E80	    			MOVLW	0x80
$0660	$6408	    			CPFSGT	STACK_8, 0
$0662	$3000	    			RRCF	STACK_0, W, 0
$0664	$0E00	    			MOVLW	0x00
$0666	$2200	    			ADDWFC	STACK_0, F, 0
$0668	$2201	    			ADDWFC	STACK_1, F, 0
$066A	$2202	    			ADDWFC	STACK_2, F, 0
$066C	$A0D8	    			BTFSS	STATUS, C, 0
$066E	$EF3F	F003			GOTO	MUL32OK
$0672	$3202	    			RRCF	STACK_2, F, 0
$0674	$3201	    			RRCF	STACK_1, F, 0
$0676	$3200	    			RRCF	STACK_0, F, 0
$0678	$4A03	    			INFSNZ	STACK_3, F, 0
$067A	$EF49	F003			GOTO	MULJPSETFOV32
$067E	$	MUL32OK:
$067E	$AE0A	    			BTFSS	STACK_10, 7, 0
$0680	$9E02	    			BCF	STACK_2, 7, 0
$0682	$0E00	    			MOVLW	0
$0684	$EF51	F003			GOTO	MULEEE
$0688	$	MULJPRES032:
$0688	$0E01	    			MOVLW	0x01
$068A	$EC02	F002			CALL	_RES032
$068E	$EF51	F003			GOTO	MULEEE
$0692	$	MULJPSETFOV32:
$0692	$0E02	    			MOVLW	0x02
$0694	$EC0A	F002			CALL	_SETFOV32
$0698	$EF51	F003			GOTO	MULEEE
$069C	$	MULJPSETFUN32:
$069C	$0E04	    			MOVLW	0x04
$069E	$EC17	F002			CALL	_SETFUN32
$06A2	$	MULEEE:
$06A2	$0012	    			RETURN
$06A4	$	_Div_8x8_U:
$06A4	$0100	    			MOVLB	0
$06A6	$6B08	    			CLRF	STACK_8, F
$06A8	$0E08	    			MOVLW	8
$06AA	$6E0C	    			MOVWF	STACK_12, 0
$06AC	$3400	    			RLCF	STACK_0, W, 0
$06AE	$3608	    			RLCF	STACK_8, F, 0
$06B0	$5004	    			MOVF	STACK_4, W, 0
$06B2	$5E08	    			SUBWF	STACK_8, F, 0
$06B4	$B0D8	    			BTFSC	STATUS, C, 0
$06B6	$EF5F	F003			GOTO	$+3
$06BA	$2608	    			ADDWF	STACK_8, F, 0
$06BC	$90D8	    			BCF	STATUS, C, 0
$06BE	$3600	    			RLCF	STACK_0, F, 0
$06C0	$2E0C	    			DECFSZ	STACK_12, F, 0
$06C2	$EF56	F003			GOTO	$-10
$06C6	$0012	    			RETURN
$000C	$	_FIXSIGN32:
$000C	$0100	    			MOVLB	0
$000E	$AE0A	    			BTFSS	STACK_10, 7, 0
$0010	$9E02	    			BCF	STACK_2, 7, 0
$0012	$0E00	    			MOVLW	0
$0014	$0012	    			RETURN
$06C8	$	_Eeprom_Read:
$06C8	$9CA6	    			BCF	EECON1, 6, 0
$06CA	$C13E	FFA9			MOVFF	FARG_Eeprom_Read+0, EEADR
$06CE	$9EA6	    			BCF	EECON1, 7, 0
$06D0	$80A6	    			BSF	EECON1, 0, 0
$06D2	$CFA8	F000			MOVFF	EEDATA, STACK_0
$06D6	$0012	    			RETURN
$06D8	$	_USART_Send_String:
;cnc_control.c,159 :: 			void USART_Send_String( char *data){
;cnc_control.c,161 :: 			while( *data != 0u ){
$06D8	$	L_USART_Send_String_2:
$06D8	$C13E	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$06DC	$C13F	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$06E0	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$06E4	$5001	    			MOVF	STACK_1, 0, 0
$06E6	$0A00	    			XORLW	0
$06E8	$E00C	    			BZ	L_USART_Send_String_3
;cnc_control.c,162 :: 			c = *data;
$06EA	$C13E	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$06EE	$C13F	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$06F2	$CFEE	F156			MOVFF	POSTINC0, FARG_Usart_Write+0
;cnc_control.c,163 :: 			USART_Write(c);
$06F6	$EC25	F002			CALL	_Usart_Write
;cnc_control.c,164 :: 			data++;
$06FA	$0101	    			MOVLB	1
$06FC	$4B3E	    			INFSNZ	FARG_USART_Send_String+0, 1, 1
$06FE	$2B3F	    			INCF	FARG_USART_Send_String+1, 1, 1
;cnc_control.c,165 :: 			}
$0700	$D7EB	    			BRA	L_USART_Send_String_2
$0702	$	L_USART_Send_String_3:
;cnc_control.c,166 :: 			USART_Write(13);
$0702	$0E0D	    			MOVLW	13
$0704	$0101	    			MOVLB	1
$0706	$6F56	    			MOVWF	FARG_Usart_Write+0, 1
$0708	$EC25	F002			CALL	_Usart_Write
;cnc_control.c,167 :: 			}
$070C	$0012	    			RETURN
$070E	$	_FloatToStr:
$070E	$0E4E	    			MOVLW	78
$0710	$0101	    			MOVLB	1
$0712	$6F44	    			MOVWF	lstr1_conv+0, 1
$0714	$0E61	    			MOVLW	97
$0716	$6F45	    			MOVWF	lstr1_conv+1, 1
$0718	$0E4E	    			MOVLW	78
$071A	$6F46	    			MOVWF	lstr1_conv+2, 1
$071C	$6B47	    			CLRF	lstr1_conv+3, 1
$071E	$0E30	    			MOVLW	48
$0720	$6F48	    			MOVWF	lstr2_conv+0, 1
$0722	$6B49	    			CLRF	lstr2_conv+1, 1
$0724	$0E49	    			MOVLW	73
$0726	$6F4A	    			MOVWF	lstr3_conv+0, 1
$0728	$0E4E	    			MOVLW	78
$072A	$6F4B	    			MOVWF	lstr3_conv+1, 1
$072C	$0E46	    			MOVLW	70
$072E	$6F4C	    			MOVWF	lstr3_conv+2, 1
$0730	$6B4D	    			CLRF	lstr3_conv+3, 1
$0732	$6B4E	    			CLRF	FloatToStr_bpoint_L0, 1
$0734	$6B51	    			CLRF	FloatToStr_dexpon_L0, 1
$0736	$C13E	F152			MOVFF	FARG_FloatToStr+0, FloatToStr_un_L0
$073A	$C13F	F153			MOVFF	FARG_FloatToStr+1, FloatToStr_un_L0+1
$073E	$C140	F154			MOVFF	FARG_FloatToStr+2, FloatToStr_un_L0+2
$0742	$C141	F155			MOVFF	FARG_FloatToStr+3, FloatToStr_un_L0+3
$0746	$5155	    			MOVF	FloatToStr_un_L0+3, 0, 1
$0748	$0AFF	    			XORLW	255
$074A	$E108	    			BNZ	L_FloatToStr_59
$074C	$5154	    			MOVF	FloatToStr_un_L0+2, 0, 1
$074E	$0AFF	    			XORLW	255
$0750	$E105	    			BNZ	L_FloatToStr_59
$0752	$5153	    			MOVF	FloatToStr_un_L0+1, 0, 1
$0754	$0AFF	    			XORLW	255
$0756	$E102	    			BNZ	L_FloatToStr_59
$0758	$5152	    			MOVF	FloatToStr_un_L0, 0, 1
$075A	$0AFF	    			XORLW	255
$075C	$	L_FloatToStr_59:
$075C	$E10E	    			BNZ	L_FloatToStr_29
$075E	$C142	F156			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$0762	$C143	F157			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$0766	$0E44	    			MOVLW	lstr1_conv
$0768	$0101	    			MOVLB	1
$076A	$6F58	    			MOVWF	FARG_strcpy+2, 1
$076C	$0E01	    			MOVLW	@lstr1_conv
$076E	$6F59	    			MOVWF	FARG_strcpy+3, 1
$0770	$EC30	F002			CALL	_strcpy
$0774	$0E03	    			MOVLW	3
$0776	$6E00	    			MOVWF	STACK_0, 0
$0778	$0012	    			RETURN
$077A	$	L_FloatToStr_29:
$077A	$0E01	    			MOVLW	1
$077C	$0101	    			MOVLB	1
$077E	$6F4F	    			MOVWF	FloatToStr_i_L0, 1
$0780	$AF54	    			BTFSS	FloatToStr_un_L0+2, 7, 1
$0782	$D00A	    			BRA	L_FloatToStr_30
$0784	$7F54	    			BTG	FloatToStr_un_L0+2, 7, 1
$0786	$2B4F	    			INCF	FloatToStr_i_L0, 1, 1
$0788	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$078C	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0790	$0E2D	    			MOVLW	45
$0792	$6EE6	    			MOVWF	POSTINC1, 0
$0794	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0796	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0798	$	L_FloatToStr_30:
$0798	$0E00	    			MOVLW	0
$079A	$6E00	    			MOVWF	STACK_0, 0
$079C	$0101	    			MOVLB	1
$079E	$1955	    			XORWF	FloatToStr_un_L0+3, 0, 1
$07A0	$E108	    			BNZ	L_FloatToStr_60
$07A2	$5000	    			MOVF	STACK_0, 0, 0
$07A4	$1954	    			XORWF	FloatToStr_un_L0+2, 0, 1
$07A6	$E105	    			BNZ	L_FloatToStr_60
$07A8	$5000	    			MOVF	STACK_0, 0, 0
$07AA	$1953	    			XORWF	FloatToStr_un_L0+1, 0, 1
$07AC	$E102	    			BNZ	L_FloatToStr_60
$07AE	$5152	    			MOVF	FloatToStr_un_L0, 0, 1
$07B0	$0A00	    			XORLW	0
$07B2	$	L_FloatToStr_60:
$07B2	$E10D	    			BNZ	L_FloatToStr_31
$07B4	$C142	F156			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$07B8	$C143	F157			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$07BC	$0E48	    			MOVLW	lstr2_conv
$07BE	$0101	    			MOVLB	1
$07C0	$6F58	    			MOVWF	FARG_strcpy+2, 1
$07C2	$0E01	    			MOVLW	@lstr2_conv
$07C4	$6F59	    			MOVWF	FARG_strcpy+3, 1
$07C6	$EC30	F002			CALL	_strcpy
$07CA	$6A00	    			CLRF	STACK_0, 0
$07CC	$0012	    			RETURN
$07CE	$	L_FloatToStr_31:
$07CE	$0101	    			MOVLB	1
$07D0	$5155	    			MOVF	FloatToStr_un_L0+3, 0, 1
$07D2	$0A7F	    			XORLW	127
$07D4	$E108	    			BNZ	L_FloatToStr_61
$07D6	$5154	    			MOVF	FloatToStr_un_L0+2, 0, 1
$07D8	$0A80	    			XORLW	128
$07DA	$E105	    			BNZ	L_FloatToStr_61
$07DC	$5153	    			MOVF	FloatToStr_un_L0+1, 0, 1
$07DE	$0A00	    			XORLW	0
$07E0	$E102	    			BNZ	L_FloatToStr_61
$07E2	$5152	    			MOVF	FloatToStr_un_L0, 0, 1
$07E4	$0A00	    			XORLW	0
$07E6	$	L_FloatToStr_61:
$07E6	$E10E	    			BNZ	L_FloatToStr_32
$07E8	$C142	F156			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$07EC	$C143	F157			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$07F0	$0E4A	    			MOVLW	lstr3_conv
$07F2	$0101	    			MOVLB	1
$07F4	$6F58	    			MOVWF	FARG_strcpy+2, 1
$07F6	$0E01	    			MOVLW	@lstr3_conv
$07F8	$6F59	    			MOVWF	FARG_strcpy+3, 1
$07FA	$EC30	F002			CALL	_strcpy
$07FE	$C14F	F000			MOVFF	FloatToStr_i_L0, STACK_0
$0802	$0012	    			RETURN
$0804	$	L_FloatToStr_32:
$0804	$	L_FloatToStr_33:
$0804	$0E00	    			MOVLW	0
$0806	$6E04	    			MOVWF	STACK_4, 0
$0808	$0E00	    			MOVLW	0
$080A	$6E05	    			MOVWF	STACK_4+1, 0
$080C	$0E00	    			MOVLW	0
$080E	$6E06	    			MOVWF	STACK_4+2, 0
$0810	$0E7F	    			MOVLW	127
$0812	$6E07	    			MOVWF	STACK_4+3, 0
$0814	$C152	F000			MOVFF	FloatToStr_un_L0, STACK_0
$0818	$C153	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$081C	$C154	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$0820	$C155	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$0824	$EC56	F002			CALL	_compare_double
$0828	$0E01	    			MOVLW	1
$082A	$B0D8	    			BTFSC	STATUS, C, 0
$082C	$0E00	    			MOVLW	0
$082E	$6E00	    			MOVWF	STACK_0, 0
$0830	$5200	    			MOVF	STACK_0, 1, 0
$0832	$E01D	    			BZ	L_FloatToStr_34
$0834	$C152	F000			MOVFF	FloatToStr_un_L0, STACK_0
$0838	$C153	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$083C	$C154	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$0840	$C155	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$0844	$0E00	    			MOVLW	0
$0846	$6E04	    			MOVWF	STACK_4, 0
$0848	$0E00	    			MOVLW	0
$084A	$6E05	    			MOVWF	STACK_4+1, 0
$084C	$0E20	    			MOVLW	32
$084E	$6E06	    			MOVWF	STACK_4+2, 0
$0850	$0E82	    			MOVLW	130
$0852	$6E07	    			MOVWF	STACK_4+3, 0
$0854	$ECBE	F002			CALL	_mul_32x32_fp
$0858	$C000	F152			MOVFF	STACK_0, FloatToStr_un_L0
$085C	$C001	F153			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$0860	$C002	F154			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$0864	$C003	F155			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$0868	$0101	    			MOVLB	1
$086A	$0751	    			DECF	FloatToStr_dexpon_L0, 1, 1
$086C	$D7CB	    			BRA	L_FloatToStr_33
$086E	$	L_FloatToStr_34:
$086E	$	L_FloatToStr_35:
$086E	$0101	    			MOVLB	1
$0870	$0E00	    			MOVLW	0
$0872	$6E04	    			MOVWF	STACK_4, 0
$0874	$0E00	    			MOVLW	0
$0876	$6E05	    			MOVWF	STACK_4+1, 0
$0878	$0E20	    			MOVLW	32
$087A	$6E06	    			MOVWF	STACK_4+2, 0
$087C	$0E82	    			MOVLW	130
$087E	$6E07	    			MOVWF	STACK_4+3, 0
$0880	$C152	F000			MOVFF	FloatToStr_un_L0, STACK_0
$0884	$C153	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$0888	$C154	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$088C	$C155	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$0890	$EC56	F002			CALL	_compare_double
$0894	$0E00	    			MOVLW	0
$0896	$B0D8	    			BTFSC	STATUS, C, 0
$0898	$0E01	    			MOVLW	1
$089A	$6E00	    			MOVWF	STACK_0, 0
$089C	$5200	    			MOVF	STACK_0, 1, 0
$089E	$E01D	    			BZ	L_FloatToStr_36
$08A0	$C152	F000			MOVFF	FloatToStr_un_L0, STACK_0
$08A4	$C153	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$08A8	$C154	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$08AC	$C155	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$08B0	$0ECD	    			MOVLW	205
$08B2	$6E04	    			MOVWF	STACK_4, 0
$08B4	$0ECC	    			MOVLW	204
$08B6	$6E05	    			MOVWF	STACK_4+1, 0
$08B8	$0E4C	    			MOVLW	76
$08BA	$6E06	    			MOVWF	STACK_4+2, 0
$08BC	$0E7B	    			MOVLW	123
$08BE	$6E07	    			MOVWF	STACK_4+3, 0
$08C0	$ECBE	F002			CALL	_mul_32x32_fp
$08C4	$C000	F152			MOVFF	STACK_0, FloatToStr_un_L0
$08C8	$C001	F153			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$08CC	$C002	F154			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$08D0	$C003	F155			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$08D4	$0101	    			MOVLB	1
$08D6	$2B51	    			INCF	FloatToStr_dexpon_L0, 1, 1
$08D8	$D7CA	    			BRA	L_FloatToStr_35
$08DA	$	L_FloatToStr_36:
$08DA	$0101	    			MOVLB	1
$08DC	$0EFF	    			MOVLW	255
$08DE	$1552	    			ANDWF	FloatToStr_un_L0, 0, 1
$08E0	$6E05	    			MOVWF	STACK_5, 0
$08E2	$0EFF	    			MOVLW	255
$08E4	$1553	    			ANDWF	FloatToStr_un_L0+1, 0, 1
$08E6	$6E06	    			MOVWF	STACK_5+1, 0
$08E8	$0E7F	    			MOVLW	127
$08EA	$1554	    			ANDWF	FloatToStr_un_L0+2, 0, 1
$08EC	$6E07	    			MOVWF	STACK_5+2, 0
$08EE	$0E00	    			MOVLW	0
$08F0	$1555	    			ANDWF	FloatToStr_un_L0+3, 0, 1
$08F2	$6E08	    			MOVWF	STACK_5+3, 0
$08F4	$C005	F000			MOVFF	STACK_5, STACK_0
$08F8	$C006	F001			MOVFF	STACK_5+1, STACK_0+1
$08FC	$C007	F002			MOVFF	STACK_5+2, STACK_0+2
$0900	$C008	F003			MOVFF	STACK_5+3, STACK_0+3
$0904	$3600	    			RLCF	STACK_0, 1, 0
$0906	$9000	    			BCF	STACK_0, 0, 0
$0908	$3601	    			RLCF	STACK_0+1, 1, 0
$090A	$3602	    			RLCF	STACK_0+2, 1, 0
$090C	$3603	    			RLCF	STACK_0+3, 1, 0
$090E	$0E00	    			MOVLW	0
$0910	$1752	    			ANDWF	FloatToStr_un_L0, 1, 1
$0912	$0E00	    			MOVLW	0
$0914	$1753	    			ANDWF	FloatToStr_un_L0+1, 1, 1
$0916	$0E00	    			MOVLW	0
$0918	$1754	    			ANDWF	FloatToStr_un_L0+2, 1, 1
$091A	$0EFF	    			MOVLW	255
$091C	$1755	    			ANDWF	FloatToStr_un_L0+3, 1, 1
$091E	$5000	    			MOVF	STACK_0, 0, 0
$0920	$1352	    			IORWF	FloatToStr_un_L0, 1, 1
$0922	$5001	    			MOVF	STACK_0+1, 0, 0
$0924	$1353	    			IORWF	FloatToStr_un_L0+1, 1, 1
$0926	$5002	    			MOVF	STACK_0+2, 0, 0
$0928	$1354	    			IORWF	FloatToStr_un_L0+2, 1, 1
$092A	$5003	    			MOVF	STACK_0+3, 0, 0
$092C	$1355	    			IORWF	FloatToStr_un_L0+3, 1, 1
$092E	$0E7F	    			MOVLW	127
$0930	$5D55	    			SUBWF	FloatToStr_un_L0+3, 0, 1
$0932	$6E00	    			MOVWF	STACK_0, 0
$0934	$C000	F150			MOVFF	STACK_0, FloatToStr_d_L0
$0938	$0E01	    			MOVLW	1
$093A	$6F55	    			MOVWF	FloatToStr_un_L0+3, 1
$093C	$5000	    			MOVF	STACK_0, 0, 0
$093E	$	L_FloatToStr_62:
$093E	$E007	    			BZ	L_FloatToStr_63
$0940	$3752	    			RLCF	FloatToStr_un_L0, 1, 1
$0942	$9152	    			BCF	FloatToStr_un_L0, 0, 1
$0944	$3753	    			RLCF	FloatToStr_un_L0+1, 1, 1
$0946	$3754	    			RLCF	FloatToStr_un_L0+2, 1, 1
$0948	$3755	    			RLCF	FloatToStr_un_L0+3, 1, 1
$094A	$0FFF	    			ADDLW	255
$094C	$D7F8	    			BRA	L_FloatToStr_62
$094E	$	L_FloatToStr_63:
$094E	$0101	    			MOVLB	1
$0950	$5155	    			MOVF	FloatToStr_un_L0+3, 0, 1
$0952	$0F30	    			ADDLW	48
$0954	$6E00	    			MOVWF	STACK_0, 0
$0956	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$095A	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$095E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0962	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0964	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0966	$0E80	    			MOVLW	128
$0968	$1951	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$096A	$6E00	    			MOVWF	STACK_0, 0
$096C	$0E80	    			MOVLW	128
$096E	$0A01	    			XORLW	1
$0970	$5C00	    			SUBWF	STACK_0, 0, 0
$0972	$E307	    			BNC	L358_ex_L_FloatToStr_39
$0974	$0E80	    			MOVLW	128
$0976	$0A06	    			XORLW	6
$0978	$6E00	    			MOVWF	STACK_0, 0
$097A	$0E80	    			MOVLW	128
$097C	$1951	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$097E	$5C00	    			SUBWF	STACK_0, 0, 0
$0980	$E20A	    			BC	L_FloatToStr_39
$0982	$	L358_ex_L_FloatToStr_39:
$0982	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0986	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$098A	$0E2E	    			MOVLW	46
$098C	$6EE6	    			MOVWF	POSTINC1, 0
$098E	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0990	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0992	$0E01	    			MOVLW	1
$0994	$6F4E	    			MOVWF	FloatToStr_bpoint_L0, 1
$0996	$	L_FloatToStr_39:
$0996	$0E06	    			MOVLW	6
$0998	$6F50	    			MOVWF	FloatToStr_d_L0, 1
$099A	$	L_FloatToStr_40:
$099A	$5150	    			MOVF	FloatToStr_d_L0, 0, 1
$099C	$0A00	    			XORLW	0
$099E	$E03E	    			BZ	L_FloatToStr_41
$09A0	$6B55	    			CLRF	FloatToStr_un_L0+3, 1
$09A2	$C152	F000			MOVFF	FloatToStr_un_L0, STACK_0
$09A6	$C153	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$09AA	$C154	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$09AE	$C155	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$09B2	$3600	    			RLCF	STACK_0, 1, 0
$09B4	$9000	    			BCF	STACK_0, 0, 0
$09B6	$3601	    			RLCF	STACK_0+1, 1, 0
$09B8	$3602	    			RLCF	STACK_0+2, 1, 0
$09BA	$3603	    			RLCF	STACK_0+3, 1, 0
$09BC	$3600	    			RLCF	STACK_0, 1, 0
$09BE	$9000	    			BCF	STACK_0, 0, 0
$09C0	$3601	    			RLCF	STACK_0+1, 1, 0
$09C2	$3602	    			RLCF	STACK_0+2, 1, 0
$09C4	$3603	    			RLCF	STACK_0+3, 1, 0
$09C6	$5000	    			MOVF	STACK_0, 0, 0
$09C8	$2752	    			ADDWF	FloatToStr_un_L0, 1, 1
$09CA	$5001	    			MOVF	STACK_0+1, 0, 0
$09CC	$2353	    			ADDWFC	FloatToStr_un_L0+1, 1, 1
$09CE	$5002	    			MOVF	STACK_0+2, 0, 0
$09D0	$2354	    			ADDWFC	FloatToStr_un_L0+2, 1, 1
$09D2	$5003	    			MOVF	STACK_0+3, 0, 0
$09D4	$2355	    			ADDWFC	FloatToStr_un_L0+3, 1, 1
$09D6	$3752	    			RLCF	FloatToStr_un_L0, 1, 1
$09D8	$9152	    			BCF	FloatToStr_un_L0, 0, 1
$09DA	$3753	    			RLCF	FloatToStr_un_L0+1, 1, 1
$09DC	$3754	    			RLCF	FloatToStr_un_L0+2, 1, 1
$09DE	$3755	    			RLCF	FloatToStr_un_L0+3, 1, 1
$09E0	$5155	    			MOVF	FloatToStr_un_L0+3, 0, 1
$09E2	$0F30	    			ADDLW	48
$09E4	$6E00	    			MOVWF	STACK_0, 0
$09E6	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$09EA	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$09EE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$09F2	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$09F4	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$09F6	$514E	    			MOVF	FloatToStr_bpoint_L0, 0, 1
$09F8	$0A00	    			XORLW	0
$09FA	$E10E	    			BNZ	L_FloatToStr_43
$09FC	$0751	    			DECF	FloatToStr_dexpon_L0, 1, 1
$09FE	$5151	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$0A00	$0A00	    			XORLW	0
$0A02	$E10A	    			BNZ	L_FloatToStr_44
$0A04	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0A08	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0A0C	$0E2E	    			MOVLW	46
$0A0E	$6EE6	    			MOVWF	POSTINC1, 0
$0A10	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0A12	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0A14	$0E01	    			MOVLW	1
$0A16	$6F4E	    			MOVWF	FloatToStr_bpoint_L0, 1
$0A18	$	L_FloatToStr_44:
$0A18	$	L_FloatToStr_43:
$0A18	$	L_FloatToStr_42:
$0A18	$0750	    			DECF	FloatToStr_d_L0, 1, 1
$0A1A	$D7BF	    			BRA	L_FloatToStr_40
$0A1C	$	L_FloatToStr_41:
$0A1C	$	L_FloatToStr_45:
$0A1C	$0EFF	    			MOVLW	255
$0A1E	$2542	    			ADDWF	FARG_FloatToStr+4, 0, 1
$0A20	$6EE9	    			MOVWF	FSR0L, 0
$0A22	$0EFF	    			MOVLW	255
$0A24	$2143	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$0A26	$6EEA	    			MOVWF	FSR0L+1, 0
$0A28	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$0A2C	$5004	    			MOVF	STACK_4, 0, 0
$0A2E	$0A30	    			XORLW	48
$0A30	$E105	    			BNZ	L_FloatToStr_46
$0A32	$0E01	    			MOVLW	1
$0A34	$5F42	    			SUBWF	FARG_FloatToStr+4, 1, 1
$0A36	$0E00	    			MOVLW	0
$0A38	$5B43	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$0A3A	$D7F0	    			BRA	L_FloatToStr_45
$0A3C	$	L_FloatToStr_46:
$0A3C	$0EFF	    			MOVLW	255
$0A3E	$2542	    			ADDWF	FARG_FloatToStr+4, 0, 1
$0A40	$6EE9	    			MOVWF	FSR0L, 0
$0A42	$0EFF	    			MOVLW	255
$0A44	$2143	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$0A46	$6EEA	    			MOVWF	FSR0L+1, 0
$0A48	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$0A4C	$5004	    			MOVF	STACK_4, 0, 0
$0A4E	$0A2E	    			XORLW	46
$0A50	$E104	    			BNZ	L_FloatToStr_47
$0A52	$0E01	    			MOVLW	1
$0A54	$5F42	    			SUBWF	FARG_FloatToStr+4, 1, 1
$0A56	$0E00	    			MOVLW	0
$0A58	$5B43	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$0A5A	$	L_FloatToStr_47:
$0A5A	$5151	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$0A5C	$0A00	    			XORLW	0
$0A5E	$E043	    			BZ	L_FloatToStr_48
$0A60	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0A64	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0A68	$0E65	    			MOVLW	101
$0A6A	$6EE6	    			MOVWF	POSTINC1, 0
$0A6C	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0A6E	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0A70	$0E80	    			MOVLW	128
$0A72	$1951	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$0A74	$6E00	    			MOVWF	STACK_0, 0
$0A76	$0E80	    			MOVLW	128
$0A78	$0A00	    			XORLW	0
$0A7A	$5C00	    			SUBWF	STACK_0, 0, 0
$0A7C	$E20B	    			BC	L_FloatToStr_49
$0A7E	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0A82	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0A86	$0E2D	    			MOVLW	45
$0A88	$6EE6	    			MOVWF	POSTINC1, 0
$0A8A	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0A8C	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0A8E	$5151	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$0A90	$0800	    			SUBLW	0
$0A92	$6F51	    			MOVWF	FloatToStr_dexpon_L0, 1
$0A94	$	L_FloatToStr_49:
$0A94	$C151	F150			MOVFF	FloatToStr_dexpon_L0, FloatToStr_d_L0
$0A98	$5151	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$0A9A	$0809	    			SUBLW	9
$0A9C	$E211	    			BC	L_FloatToStr_50
$0A9E	$0E0A	    			MOVLW	10
$0AA0	$6E04	    			MOVWF	STACK_4, 0
$0AA2	$C150	F000			MOVFF	FloatToStr_d_L0, STACK_0
$0AA6	$EC52	F003			CALL	_div_8x8_u
$0AAA	$0E30	    			MOVLW	48
$0AAC	$2600	    			ADDWF	STACK_0, 1, 0
$0AAE	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0AB2	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0AB6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0ABA	$0101	    			MOVLB	1
$0ABC	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0ABE	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0AC0	$	L_FloatToStr_50:
$0AC0	$0E0A	    			MOVLW	10
$0AC2	$6E04	    			MOVWF	STACK_4, 0
$0AC4	$C150	F000			MOVFF	FloatToStr_d_L0, STACK_0
$0AC8	$EC52	F003			CALL	_div_8x8_u
$0ACC	$C008	F000			MOVFF	STACK_8, STACK_0
$0AD0	$0E30	    			MOVLW	48
$0AD2	$2600	    			ADDWF	STACK_0, 1, 0
$0AD4	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0AD8	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0ADC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0AE0	$0101	    			MOVLB	1
$0AE2	$4B42	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$0AE4	$2B43	    			INCF	FARG_FloatToStr+5, 1, 1
$0AE6	$	L_FloatToStr_48:
$0AE6	$C142	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$0AEA	$C143	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$0AEE	$6AE6	    			CLRF	POSTINC1, 0
$0AF0	$6A00	    			CLRF	STACK_0, 0
$0AF2	$0012	    			RETURN
$0AF4	$	_NRM4032:
$0AF4	$0100	    			MOVLB	0
$0AF6	$B00C	    			BTFSC	STACK_12, 0, 0
$0AF8	$EFBD	F005			GOTO	NRMRND4032
$0AFC	$A20C	    			BTFSS	STACK_12, 1, 0
$0AFE	$EF65	F006			GOTO	NRM40JPSETFOV32
$0B02	$	NRM4032:
$0B02	$6A0E	    			CLRF	STACK_14, 0
$0B04	$0E00	    			MOVLW	0x00
$0B06	$6402	    			CPFSGT	STACK_2, 0
$0B08	$EFD4	F005			GOTO	NRM4032A
$0B0C	$	TNIB4032:
$0B0C	$0EF0	    			MOVLW	0xF0
$0B0E	$1402	    			ANDWF	STACK_2, W, 0
$0B10	$A4D8	    			BTFSS	STATUS, Z, 0
$0B12	$EF9F	F005			GOTO	NORM4032
$0B16	$3A02	    			SWAPF	STACK_2, F, 0
$0B18	$3801	    			SWAPF	STACK_1, W, 0
$0B1A	$0B0F	    			ANDLW	0x0F
$0B1C	$2602	    			ADDWF	STACK_2, F, 0
$0B1E	$3801	    			SWAPF	STACK_1, W, 0
$0B20	$0BF0	    			ANDLW	0xF0
$0B22	$6E01	    			MOVWF	STACK_1, 0
$0B24	$3800	    			SWAPF	STACK_0, W, 0
$0B26	$0B0F	    			ANDLW	0x0F
$0B28	$2601	    			ADDWF	STACK_1, F, 0
$0B2A	$3800	    			SWAPF	STACK_0, W, 0
$0B2C	$0BF0	    			ANDLW	0xF0
$0B2E	$6E00	    			MOVWF	STACK_0, 0
$0B30	$3808	    			SWAPF	STACK_8, W, 0
$0B32	$0B0F	    			ANDLW	0x0F
$0B34	$2600	    			ADDWF	STACK_0, F, 0
$0B36	$3808	    			SWAPF	STACK_8, W, 0
$0B38	$0BF0	    			ANDLW	0xF0
$0B3A	$6E08	    			MOVWF	STACK_8, 0
$0B3C	$840E	    			BSF	STACK_14, 2, 0
$0B3E	$	NORM4032:
$0B3E	$90D8	    			BCF	STATUS, C, 0
$0B40	$BE02	    			BTFSC	STACK_2, 7, 0
$0B42	$EFB8	F005			GOTO	TNORMUN4032
$0B46	$3608	    			RLCF	STACK_8, F, 0
$0B48	$3600	    			RLCF	STACK_0, F, 0
$0B4A	$3601	    			RLCF	STACK_1, F, 0
$0B4C	$3602	    			RLCF	STACK_2, F, 0
$0B4E	$2A0E	    			INCF	STACK_14, F, 0
$0B50	$BE02	    			BTFSC	STACK_2, 7, 0
$0B52	$EFB8	F005			GOTO	TNORMUN4032
$0B56	$3608	    			RLCF	STACK_8, F, 0
$0B58	$3600	    			RLCF	STACK_0, F, 0
$0B5A	$3601	    			RLCF	STACK_1, F, 0
$0B5C	$3602	    			RLCF	STACK_2, F, 0
$0B5E	$2A0E	    			INCF	STACK_14, F, 0
$0B60	$BE02	    			BTFSC	STACK_2, 7, 0
$0B62	$EFB8	F005			GOTO	TNORMUN4032
$0B66	$3608	    			RLCF	STACK_8, F, 0
$0B68	$3600	    			RLCF	STACK_0, F, 0
$0B6A	$3601	    			RLCF	STACK_1, F, 0
$0B6C	$3602	    			RLCF	STACK_2, F, 0
$0B6E	$2A0E	    			INCF	STACK_14, F, 0
$0B70	$	TNORMUN4032:
$0B70	$500E	    			MOVF	STACK_14, W, 0
$0B72	$6403	    			CPFSGT	STACK_3, 0
$0B74	$EF59	F006			GOTO	NRM40JPSETFUN32
$0B78	$5E03	    			SUBWF	STACK_3, F, 0
$0B7A	$	NRMRND4032:
$0B7A	$BC0B	    			BTFSC	STACK_11, 6, 0
$0B7C	$AE08	    			BTFSS	STACK_8, 7, 0
$0B7E	$EF5F	F006			GOTO	NRM40JPFIXSIGN32
$0B82	$80D8	    			BSF	STATUS, C, 0
$0B84	$0E80	    			MOVLW	0x80
$0B86	$6408	    			CPFSGT	STACK_8, 0
$0B88	$3000	    			RRCF	STACK_0, W, 0
$0B8A	$0E00	    			MOVLW	0x00
$0B8C	$2200	    			ADDWFC	STACK_0, F, 0
$0B8E	$2201	    			ADDWFC	STACK_1, F, 0
$0B90	$2202	    			ADDWFC	STACK_2, F, 0
$0B92	$A0D8	    			BTFSS	STATUS, C, 0
$0B94	$EF5F	F006			GOTO	NRM40JPFIXSIGN32
$0B98	$3202	    			RRCF	STACK_2, F, 0
$0B9A	$3201	    			RRCF	STACK_1, F, 0
$0B9C	$3200	    			RRCF	STACK_0, F, 0
$0B9E	$4A03	    			INFSNZ	STACK_3, F, 0
$0BA0	$EF65	F006			GOTO	NRM40JPSETFOV32
$0BA4	$EF5F	F006			GOTO	NRM40JPFIXSIGN32
$0BA8	$	NRM4032A:
$0BA8	$C001	F002			MOVFF	STACK_1, STACK_2
$0BAC	$C000	F001			MOVFF	STACK_0, STACK_1
$0BB0	$C008	F000			MOVFF	STACK_8, STACK_0
$0BB4	$6A08	    			CLRF	STACK_8, 0
$0BB6	$0E00	    			MOVLW	0x00
$0BB8	$860E	    			BSF	STACK_14, 3, 0
$0BBA	$6402	    			CPFSGT	STACK_2, 0
$0BBC	$EF0B	F006			GOTO	NRM4032B
$0BC0	$	TNIB4032A:
$0BC0	$0EF0	    			MOVLW	0xF0
$0BC2	$1402	    			ANDWF	STACK_2, W, 0
$0BC4	$A4D8	    			BTFSS	STATUS, Z, 0
$0BC6	$EFF3	F005			GOTO	NORM4032A
$0BCA	$3A02	    			SWAPF	STACK_2, F, 0
$0BCC	$3801	    			SWAPF	STACK_1, W, 0
$0BCE	$0B0F	    			ANDLW	0x0F
$0BD0	$2602	    			ADDWF	STACK_2, F, 0
$0BD2	$3801	    			SWAPF	STACK_1, W, 0
$0BD4	$0BF0	    			ANDLW	0xF0
$0BD6	$6E01	    			MOVWF	STACK_1, 0
$0BD8	$3800	    			SWAPF	STACK_0, W, 0
$0BDA	$0B0F	    			ANDLW	0x0F
$0BDC	$2601	    			ADDWF	STACK_1, F, 0
$0BDE	$3800	    			SWAPF	STACK_0, W, 0
$0BE0	$0BF0	    			ANDLW	0xF0
$0BE2	$6E00	    			MOVWF	STACK_0, 0
$0BE4	$840E	    			BSF	STACK_14, 2, 0
$0BE6	$	NORM4032A:
$0BE6	$90D8	    			BCF	STATUS, C, 0
$0BE8	$BE02	    			BTFSC	STACK_2, 7, 0
$0BEA	$EFB8	F005			GOTO	TNORMUN4032
$0BEE	$3600	    			RLCF	STACK_0, F, 0
$0BF0	$3601	    			RLCF	STACK_1, F, 0
$0BF2	$3602	    			RLCF	STACK_2, F, 0
$0BF4	$2A0E	    			INCF	STACK_14, F, 0
$0BF6	$BE02	    			BTFSC	STACK_2, 7, 0
$0BF8	$EFB8	F005			GOTO	TNORMUN4032
$0BFC	$3600	    			RLCF	STACK_0, F, 0
$0BFE	$3601	    			RLCF	STACK_1, F, 0
$0C00	$3602	    			RLCF	STACK_2, F, 0
$0C02	$2A0E	    			INCF	STACK_14, F, 0
$0C04	$BE02	    			BTFSC	STACK_2, 7, 0
$0C06	$EFB8	F005			GOTO	TNORMUN4032
$0C0A	$3600	    			RLCF	STACK_0, F, 0
$0C0C	$3601	    			RLCF	STACK_1, F, 0
$0C0E	$3602	    			RLCF	STACK_2, F, 0
$0C10	$2A0E	    			INCF	STACK_14, F, 0
$0C12	$EFB8	F005			GOTO	TNORMUN4032
$0C16	$	NRM4032B:
$0C16	$C001	F002			MOVFF	STACK_1, STACK_2
$0C1A	$C000	F001			MOVFF	STACK_0, STACK_1
$0C1E	$6A00	    			CLRF	STACK_0, 0
$0C20	$0E00	    			MOVLW	0x00
$0C22	$960E	    			BCF	STACK_14, 3, 0
$0C24	$880E	    			BSF	STACK_14, 4, 0
$0C26	$6402	    			CPFSGT	STACK_2, 0
$0C28	$EF38	F006			GOTO	NRM4032C
$0C2C	$	TNIB4032B:
$0C2C	$0EF0	    			MOVLW	0xF0
$0C2E	$1402	    			ANDWF	STACK_2, W, 0
$0C30	$A4D8	    			BTFSS	STATUS, Z, 0
$0C32	$EF23	F006			GOTO	NORM4032B
$0C36	$3A02	    			SWAPF	STACK_2, F, 0
$0C38	$3801	    			SWAPF	STACK_1, W, 0
$0C3A	$0B0F	    			ANDLW	0x0F
$0C3C	$2602	    			ADDWF	STACK_2, F, 0
$0C3E	$3801	    			SWAPF	STACK_1, W, 0
$0C40	$0BF0	    			ANDLW	0xF0
$0C42	$6E01	    			MOVWF	STACK_1, 0
$0C44	$840E	    			BSF	STACK_14, 2, 0
$0C46	$	NORM4032B:
$0C46	$90D8	    			BCF	STATUS, C, 0
$0C48	$BE02	    			BTFSC	STACK_2, 7, 0
$0C4A	$EFB8	F005			GOTO	TNORMUN4032
$0C4E	$3601	    			RLCF	STACK_1, F, 0
$0C50	$3602	    			RLCF	STACK_2, F, 0
$0C52	$2A0E	    			INCF	STACK_14, F, 0
$0C54	$BE02	    			BTFSC	STACK_2, 7, 0
$0C56	$EFB8	F005			GOTO	TNORMUN4032
$0C5A	$3601	    			RLCF	STACK_1, F, 0
$0C5C	$3602	    			RLCF	STACK_2, F, 0
$0C5E	$2A0E	    			INCF	STACK_14, F, 0
$0C60	$BE02	    			BTFSC	STACK_2, 7, 0
$0C62	$EFB8	F005			GOTO	TNORMUN4032
$0C66	$3601	    			RLCF	STACK_1, F, 0
$0C68	$3602	    			RLCF	STACK_2, F, 0
$0C6A	$2A0E	    			INCF	STACK_14, F, 0
$0C6C	$EFB8	F005			GOTO	TNORMUN4032
$0C70	$	NRM4032C:
$0C70	$C001	F002			MOVFF	STACK_1, STACK_2
$0C74	$6A01	    			CLRF	STACK_1, 0
$0C76	$0E00	    			MOVLW	0x00
$0C78	$860E	    			BSF	STACK_14, 3, 0
$0C7A	$6402	    			CPFSGT	STACK_2, 0
$0C7C	$EF6B	F006			GOTO	NRM40JPRES032
$0C80	$	TNIB4032C:
$0C80	$0EF0	    			MOVLW	0xF0
$0C82	$1402	    			ANDWF	STACK_2, W, 0
$0C84	$A4D8	    			BTFSS	STATUS, Z, 0
$0C86	$EF47	F006			GOTO	NORM4032C
$0C8A	$3A02	    			SWAPF	STACK_2, F, 0
$0C8C	$840E	    			BSF	STACK_14, 2, 0
$0C8E	$	NORM4032C:
$0C8E	$90D8	    			BCF	STATUS, C, 0
$0C90	$BE02	    			BTFSC	STACK_2, 7, 0
$0C92	$EFB8	F005			GOTO	TNORMUN4032
$0C96	$3602	    			RLCF	STACK_2, F, 0
$0C98	$2A0E	    			INCF	STACK_14, F, 0
$0C9A	$BE02	    			BTFSC	STACK_2, 7, 0
$0C9C	$EFB8	F005			GOTO	TNORMUN4032
$0CA0	$3602	    			RLCF	STACK_2, F, 0
$0CA2	$2A0E	    			INCF	STACK_14, F, 0
$0CA4	$BE02	    			BTFSC	STACK_2, 7, 0
$0CA6	$EFB8	F005			GOTO	TNORMUN4032
$0CAA	$3602	    			RLCF	STACK_2, F, 0
$0CAC	$2A0E	    			INCF	STACK_14, F, 0
$0CAE	$EFB8	F005			GOTO	TNORMUN4032
$0CB2	$	NRM40JPSETFUN32:
$0CB2	$0E01	    			MOVLW	0x01
$0CB4	$6E0C	    			MOVWF	STACK_12, 0
$0CB6	$EC17	F002			CALL	_SETFUN32
$0CBA	$EF6F	F006			GOTO	NRM40EEE
$0CBE	$	NRM40JPFIXSIGN32:
$0CBE	$0E02	    			MOVLW	0x02
$0CC0	$6E0C	    			MOVWF	STACK_12, 0
$0CC2	$EC06	F000			CALL	_FIXSIGN32
$0CC6	$EF6F	F006			GOTO	NRM40EEE
$0CCA	$	NRM40JPSETFOV32:
$0CCA	$0E04	    			MOVLW	0x04
$0CCC	$6E0C	    			MOVWF	STACK_12, 0
$0CCE	$EC0A	F002			CALL	_SETFOV32
$0CD2	$EF6F	F006			GOTO	NRM40EEE
$0CD6	$	NRM40JPRES032:
$0CD6	$0E08	    			MOVLW	0x08
$0CD8	$6E0C	    			MOVWF	STACK_12, 0
$0CDA	$EC02	F002			CALL	_RES032
$0CDE	$	NRM40EEE:
$0CDE	$0012	    			RETURN
$0CE0	$	_Eeprom_Write:
$0CE0	$	L_Eeprom_Write_0:
$0CE0	$A2A6	    			BTFSS	EECON1, 1, 0
$0CE2	$D002	    			BRA	L_Eeprom_Write_1
$0CE4	$0000	    			NOP
$0CE6	$D7FC	    			BRA	L_Eeprom_Write_0
$0CE8	$	L_Eeprom_Write_1:
$0CE8	$9CA6	    			BCF	EECON1, 6, 0
$0CEA	$C13E	FFA9			MOVFF	FARG_Eeprom_Write+0, EEADR
$0CEE	$C13F	FFA8			MOVFF	FARG_Eeprom_Write+1, EEDATA
$0CF2	$9EA6	    			BCF	EECON1, 7, 0
$0CF4	$84A6	    			BSF	EECON1, 2, 0
$0CF6	$9EF2	    			BCF	INTCON, 7, 0
$0CF8	$0E55	    			MOVLW	85
$0CFA	$6EA7	    			MOVWF	EECON2, 0
$0CFC	$0EAA	    			MOVLW	170
$0CFE	$6EA7	    			MOVWF	EECON2, 0
$0D00	$82A6	    			BSF	EECON1, 1, 0
$0D02	$8EF2	    			BSF	INTCON, 7, 0
$0D04	$94A6	    			BCF	EECON1, 2, 0
$0D06	$0012	    			RETURN
$0D08	$	_isdigit:
$0D08	$0101	    			MOVLB	1
$0D0A	$513E	    			MOVF	FARG_isdigit+0, 0, 1
$0D0C	$0839	    			SUBLW	57
$0D0E	$E307	    			BNC	L_isdigit_9
$0D10	$0E30	    			MOVLW	48
$0D12	$5D3E	    			SUBWF	FARG_isdigit+0, 0, 1
$0D14	$E304	    			BNC	L_isdigit_9
$0D16	$0E01	    			MOVLW	1
$0D18	$6E00	    			MOVWF	STACK_0, 0
$0D1A	$EF90	F006			GOTO	L_isdigit_8
$0D1E	$	L_isdigit_9:
$0D1E	$6A00	    			CLRF	STACK_0, 0
$0D20	$	L_isdigit_8:
$0D20	$0012	    			RETURN
$0D22	$	_Mul_16x16_S:
$0D22	$0100	    			MOVLB	0
$0D24	$5000	    			MOVF	STACK_0, W, 0
$0D26	$0204	    			MULWF	STACK_4, 0
$0D28	$CFF4	F009			MOVFF	PRODH, STACK_9
$0D2C	$CFF3	F008			MOVFF	PRODL, STACK_8
$0D30	$5001	    			MOVF	STACK_1, W, 0
$0D32	$0205	    			MULWF	STACK_5, 0
$0D34	$CFF4	F00B			MOVFF	PRODH, STACK_11
$0D38	$CFF3	F00A			MOVFF	PRODL, STACK_10
$0D3C	$5000	    			MOVF	STACK_0, W, 0
$0D3E	$0205	    			MULWF	STACK_5, 0
$0D40	$50F3	    			MOVF	PRODL, W, 0
$0D42	$2609	    			ADDWF	STACK_9, F, 0
$0D44	$50F4	    			MOVF	PRODH, W, 0
$0D46	$220A	    			ADDWFC	STACK_10, F, 0
$0D48	$6AE8	    			CLRF	WREG, 0
$0D4A	$220B	    			ADDWFC	STACK_11, F, 0
$0D4C	$5001	    			MOVF	STACK_1, W, 0
$0D4E	$0204	    			MULWF	STACK_4, 0
$0D50	$50F3	    			MOVF	PRODL, W, 0
$0D52	$2609	    			ADDWF	STACK_9, F, 0
$0D54	$50F4	    			MOVF	PRODH, W, 0
$0D56	$220A	    			ADDWFC	STACK_10, F, 0
$0D58	$6AE8	    			CLRF	WREG, 0
$0D5A	$220B	    			ADDWFC	STACK_11, F, 0
$0D5C	$AE05	    			BTFSS	STACK_5, 7, 0
$0D5E	$EFB5	F006			GOTO	$+5
$0D62	$5000	    			MOVF	STACK_0, W, 0
$0D64	$5C0A	    			SUBWF	STACK_10, W, 0
$0D66	$5001	    			MOVF	STACK_1, W, 0
$0D68	$580B	    			SUBWFB	STACK_11, W, 0
$0D6A	$AE01	    			BTFSS	STACK_1, 7, 0
$0D6C	$EFBC	F006			GOTO	$+5
$0D70	$5004	    			MOVF	STACK_4, W, 0
$0D72	$5C0A	    			SUBWF	STACK_10, W, 0
$0D74	$5005	    			MOVF	STACK_5, W, 0
$0D76	$580B	    			SUBWFB	STACK_11, W, 0
$0D78	$C008	F000			MOVFF	STACK_8, STACK_0
$0D7C	$C009	F001			MOVFF	STACK_9, STACK_1
$0D80	$C00A	F002			MOVFF	STACK_10, STACK_2
$0D84	$C00B	F003			MOVFF	STACK_11, STACK_3
$0D88	$0012	    			RETURN
$0D8A	$	_strConstCpy:
;cnc_control.c,152 :: 			void strConstCpy(char *dest, const char *source) {
;cnc_control.c,153 :: 			while(*source){
$0D8A	$	L_strConstCpy_0:
$0D8A	$C12D	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$0D8E	$C12E	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$0D92	$C12F	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$0D96	$0009	    			TBLRD*+
$0D98	$CFF5	F000			MOVFF	TABLAT, STACK_0
$0D9C	$5200	    			MOVF	STACK_0, 1, 0
$0D9E	$E01D	    			BZ	L_strConstCpy_1
;cnc_control.c,154 :: 			*dest++ = *source++ ;
$0DA0	$C12D	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$0DA4	$C12E	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$0DA8	$C12F	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$0DAC	$0009	    			TBLRD*+
$0DAE	$CFF5	F000			MOVFF	TABLAT, STACK_0
$0DB2	$C12B	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$0DB6	$C12C	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$0DBA	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0DBE	$0101	    			MOVLB	1
$0DC0	$4B2B	    			INFSNZ	FARG_strConstCpy+0, 1, 1
$0DC2	$2B2C	    			INCF	FARG_strConstCpy+1, 1, 1
$0DC4	$0E01	    			MOVLW	1
$0DC6	$272D	    			ADDWF	FARG_strConstCpy+2, 1, 1
$0DC8	$0E00	    			MOVLW	0
$0DCA	$232E	    			ADDWFC	FARG_strConstCpy+3, 1, 1
$0DCC	$232F	    			ADDWFC	FARG_strConstCpy+4, 1, 1
;cnc_control.c,155 :: 			*dest = 0 ;
$0DCE	$C12B	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$0DD2	$C12C	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$0DD6	$6AE6	    			CLRF	POSTINC1, 0
;cnc_control.c,156 :: 			}
$0DD8	$D7D8	    			BRA	L_strConstCpy_0
$0DDA	$	L_strConstCpy_1:
;cnc_control.c,157 :: 			}
$0DDA	$0012	    			RETURN
$0DDC	$	_Eeprom_Read_Obj:
;eeprom.c,10 :: 			void Eeprom_Read_Obj(word addr,void *obj,byte size)
;eeprom.c,12 :: 			byte i,*ptr=obj;
$0DDC	$C12D	F131			MOVFF	FARG_Eeprom_Read_Obj+2, Eeprom_Read_Obj_ptr_L0
$0DE0	$C12E	F132			MOVFF	FARG_Eeprom_Read_Obj+3, Eeprom_Read_Obj_ptr_L0+1
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$0DE4	$0101	    			MOVLB	1
$0DE6	$6B30	    			CLRF	Eeprom_Read_Obj_i_L0, 1
$0DE8	$	L_Eeprom_Read_Obj_3:
$0DE8	$512F	    			MOVF	FARG_Eeprom_Read_Obj+4, 0, 1
$0DEA	$5D30	    			SUBWF	Eeprom_Read_Obj_i_L0, 0, 1
$0DEC	$E212	    			BC	L_Eeprom_Read_Obj_4
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$0DEE	$C12B	F13E			MOVFF	FARG_Eeprom_Read_Obj+0, FARG_Eeprom_Read+0
$0DF2	$EC64	F003			CALL	_Eeprom_Read
$0DF6	$C131	FFE1			MOVFF	Eeprom_Read_Obj_ptr_L0, FSR1L
$0DFA	$C132	FFE2			MOVFF	Eeprom_Read_Obj_ptr_L0+1, FSR1H
$0DFE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0E02	$0101	    			MOVLB	1
$0E04	$4B31	    			INFSNZ	Eeprom_Read_Obj_ptr_L0, 1, 1
$0E06	$2B32	    			INCF	Eeprom_Read_Obj_ptr_L0+1, 1, 1
$0E08	$4B2B	    			INFSNZ	FARG_Eeprom_Read_Obj+0, 1, 1
$0E0A	$2B2C	    			INCF	FARG_Eeprom_Read_Obj+1, 1, 1
$0E0C	$	L_Eeprom_Read_Obj_5:
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$0E0C	$0101	    			MOVLB	1
$0E0E	$2B30	    			INCF	Eeprom_Read_Obj_i_L0, 1, 1
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$0E10	$D7EB	    			BRA	L_Eeprom_Read_Obj_3
$0E12	$	L_Eeprom_Read_Obj_4:
;eeprom.c,15 :: 			}
$0E12	$0012	    			RETURN
$0E14	$	_printFloat:
;cnc_control.c,197 :: 			void printFloat( char* name, float f ){
;cnc_control.c,199 :: 			USART_Send_String(name);
$0E14	$C12B	F13E			MOVFF	FARG_printFloat+0, FARG_USART_Send_String+0
$0E18	$C12C	F13F			MOVFF	FARG_printFloat+1, FARG_USART_Send_String+1
$0E1C	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,200 :: 			FloatToStr(f,floatTxt);
$0E20	$C12D	F13E			MOVFF	FARG_printFloat+2, FARG_FloatToStr+0
$0E24	$C12E	F13F			MOVFF	FARG_printFloat+3, FARG_FloatToStr+1
$0E28	$C12F	F140			MOVFF	FARG_printFloat+4, FARG_FloatToStr+2
$0E2C	$C130	F141			MOVFF	FARG_printFloat+5, FARG_FloatToStr+3
$0E30	$0E31	    			MOVLW	printFloat_floatTxt_L0
$0E32	$0101	    			MOVLB	1
$0E34	$6F42	    			MOVWF	FARG_FloatToStr+4, 1
$0E36	$0E01	    			MOVLW	@printFloat_floatTxt_L0
$0E38	$6F43	    			MOVWF	FARG_FloatToStr+5, 1
$0E3A	$EC87	F003			CALL	_FloatToStr
;cnc_control.c,201 :: 			USART_Send_String(floatTxt);
$0E3E	$0E31	    			MOVLW	printFloat_floatTxt_L0
$0E40	$0101	    			MOVLB	1
$0E42	$6F3E	    			MOVWF	FARG_USART_Send_String+0, 1
$0E44	$0E01	    			MOVLW	@printFloat_floatTxt_L0
$0E46	$6F3F	    			MOVWF	FARG_USART_Send_String+1, 1
$0E48	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,202 :: 			}
$0E4C	$0012	    			RETURN
$0E4E	$	_Byte2Double:
$0E4E	$0100	    			MOVLB	0
$0E50	$C000	F008			MOVFF	STACK_0, STACK_8
$0E54	$	FLO08U32:
$0E54	$6A0B	    			CLRF	STACK_11, 0
$0E56	$6A0C	    			CLRF	STACK_12, 0
$0E58	$0E9E	    			MOVLW	0x9E
$0E5A	$6E03	    			MOVWF	STACK_3, 0
$0E5C	$6A0A	    			CLRF	STACK_10, 0
$0E5E	$6A02	    			CLRF	STACK_2, 0
$0E60	$6A01	    			CLRF	STACK_1, 0
$0E62	$6A00	    			CLRF	STACK_0, 0
$0E64	$0E02	    			MOVLW	0x02
$0E66	$6E0C	    			MOVWF	STACK_12, 0
$0E68	$EC7A	F005			CALL	_NRM4032
$0E6C	$0012	    			RETURN
$0E6E	$	_Eeprom_Write_Obj:
;eeprom.c,3 :: 			void Eeprom_Write_Obj(word addr,void *obj,byte size)
;eeprom.c,5 :: 			byte i,*ptr=(byte *)obj;
$0E6E	$C12D	F131			MOVFF	FARG_Eeprom_Write_Obj+2, Eeprom_Write_Obj_ptr_L0
$0E72	$C12E	F132			MOVFF	FARG_Eeprom_Write_Obj+3, Eeprom_Write_Obj_ptr_L0+1
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$0E76	$0101	    			MOVLB	1
$0E78	$6B30	    			CLRF	Eeprom_Write_Obj_i_L0, 1
$0E7A	$	L_Eeprom_Write_Obj_0:
$0E7A	$512F	    			MOVF	FARG_Eeprom_Write_Obj+4, 0, 1
$0E7C	$5D30	    			SUBWF	Eeprom_Write_Obj_i_L0, 0, 1
$0E7E	$E212	    			BC	L_Eeprom_Write_Obj_1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$0E80	$C12B	F13E			MOVFF	FARG_Eeprom_Write_Obj+0, FARG_Eeprom_Write+0
$0E84	$C131	FFE9			MOVFF	Eeprom_Write_Obj_ptr_L0, FSR0L
$0E88	$C132	FFEA			MOVFF	Eeprom_Write_Obj_ptr_L0+1, FSR0H
$0E8C	$CFEE	F13F			MOVFF	POSTINC0, FARG_Eeprom_Write+1
$0E90	$EC70	F006			CALL	_Eeprom_Write
$0E94	$0101	    			MOVLB	1
$0E96	$4B2B	    			INFSNZ	FARG_Eeprom_Write_Obj+0, 1, 1
$0E98	$2B2C	    			INCF	FARG_Eeprom_Write_Obj+1, 1, 1
$0E9A	$4B31	    			INFSNZ	Eeprom_Write_Obj_ptr_L0, 1, 1
$0E9C	$2B32	    			INCF	Eeprom_Write_Obj_ptr_L0+1, 1, 1
$0E9E	$	L_Eeprom_Write_Obj_2:
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$0E9E	$0101	    			MOVLB	1
$0EA0	$2B30	    			INCF	Eeprom_Write_Obj_i_L0, 1, 1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$0EA2	$D7EB	    			BRA	L_Eeprom_Write_Obj_0
$0EA4	$	L_Eeprom_Write_Obj_1:
;eeprom.c,8 :: 			}
$0EA4	$0012	    			RETURN
$0EA6	$	_strchr:
$0EA6	$	L_strchr_24:
$0EA6	$C12B	FFE9			MOVFF	FARG_strchr+0, FSR0L
$0EAA	$C12C	FFEA			MOVFF	FARG_strchr+1, FSR0H
$0EAE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$0EB2	$5002	    			MOVF	STACK_2, 0, 0
$0EB4	$0101	    			MOVLB	1
$0EB6	$192D	    			XORWF	FARG_strchr+2, 0, 1
$0EB8	$E105	    			BNZ	L_strchr_26
$0EBA	$C12B	F000			MOVFF	FARG_strchr+0, STACK_0
$0EBE	$C12C	F001			MOVFF	FARG_strchr+1, STACK_0+1
$0EC2	$0012	    			RETURN
$0EC4	$	L_strchr_26:
$0EC4	$0101	    			MOVLB	1
$0EC6	$4B2B	    			INFSNZ	FARG_strchr+0, 1, 1
$0EC8	$2B2C	    			INCF	FARG_strchr+1, 1, 1
$0ECA	$C12B	FFE9			MOVFF	FARG_strchr+0, FSR0L
$0ECE	$C12C	FFEA			MOVFF	FARG_strchr+1, FSR0H
$0ED2	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$0ED6	$5200	    			MOVF	STACK_0, 1, 0
$0ED8	$E1E6	    			BNZ	L_strchr_24
$0EDA	$	L_strchr_25:
$0EDA	$6A00	    			CLRF	STACK_0, 0
$0EDC	$6A01	    			CLRF	STACK_0+1, 0
$0EDE	$0012	    			RETURN
$0EE0	$	_atoi:
$0EE0	$	___atoi_skipws_atoi:
$0EE0	$C12B	FFE9			MOVFF	FARG_atoi+0, FSR0L
$0EE4	$C12C	FFEA			MOVFF	FARG_atoi+1, FSR0H
$0EE8	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$0EEC	$C002	F12D			MOVFF	STACK_2, atoi_c_L0
$0EF0	$5002	    			MOVF	STACK_2, 0, 0
$0EF2	$0A20	    			XORLW	32
$0EF4	$E004	    			BZ	L256_ex_L_atoi_55
$0EF6	$0101	    			MOVLB	1
$0EF8	$512D	    			MOVF	atoi_c_L0, 0, 1
$0EFA	$0A09	    			XORLW	9
$0EFC	$E104	    			BNZ	L_atoi_55
$0EFE	$	L256_ex_L_atoi_55:
$0EFE	$0101	    			MOVLB	1
$0F00	$4B2B	    			INFSNZ	FARG_atoi+0, 1, 1
$0F02	$2B2C	    			INCF	FARG_atoi+1, 1, 1
$0F04	$D7ED	    			BRA	___atoi_skipws_atoi
$0F06	$	L_atoi_55:
$0F06	$0101	    			MOVLB	1
$0F08	$6B2E	    			CLRF	atoi_a_L0, 1
$0F0A	$6B2F	    			CLRF	atoi_a_L0+1, 1
$0F0C	$6B30	    			CLRF	atoi_sign_L0, 1
$0F0E	$512D	    			MOVF	atoi_c_L0, 0, 1
$0F10	$0A2D	    			XORLW	45
$0F12	$E104	    			BNZ	L_atoi_56
$0F14	$2B30	    			INCF	atoi_sign_L0, 1, 1
$0F16	$4B2B	    			INFSNZ	FARG_atoi+0, 1, 1
$0F18	$2B2C	    			INCF	FARG_atoi+1, 1, 1
$0F1A	$D006	    			BRA	L_atoi_57
$0F1C	$	L_atoi_56:
$0F1C	$0101	    			MOVLB	1
$0F1E	$512D	    			MOVF	atoi_c_L0, 0, 1
$0F20	$0A2B	    			XORLW	43
$0F22	$E102	    			BNZ	L_atoi_58
$0F24	$4B2B	    			INFSNZ	FARG_atoi+0, 1, 1
$0F26	$2B2C	    			INCF	FARG_atoi+1, 1, 1
$0F28	$	L_atoi_58:
$0F28	$	L_atoi_57:
$0F28	$	___atoi_conv_atoi:
$0F28	$C12B	FFE9			MOVFF	FARG_atoi+0, FSR0L
$0F2C	$C12C	FFEA			MOVFF	FARG_atoi+1, FSR0H
$0F30	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$0F34	$C000	F12D			MOVFF	STACK_0, atoi_c_L0
$0F38	$C000	F13E			MOVFF	STACK_0, FARG_isdigit+0
$0F3C	$EC84	F006			CALL	_isdigit
$0F40	$5200	    			MOVF	STACK_0, 1, 0
$0F42	$E01A	    			BZ	L_atoi_59
$0F44	$C12E	F000			MOVFF	atoi_a_L0, STACK_0
$0F48	$C12F	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$0F4C	$0E0A	    			MOVLW	10
$0F4E	$6E04	    			MOVWF	STACK_4, 0
$0F50	$0E00	    			MOVLW	0
$0F52	$6E05	    			MOVWF	STACK_4+1, 0
$0F54	$EC91	F006			CALL	_mul_16x16_s
$0F58	$0E30	    			MOVLW	48
$0F5A	$0101	    			MOVLB	1
$0F5C	$5D2D	    			SUBWF	atoi_c_L0, 0, 1
$0F5E	$6E02	    			MOVWF	STACK_2, 0
$0F60	$6A03	    			CLRF	STACK_2+1, 0
$0F62	$0E00	    			MOVLW	0
$0F64	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$0F66	$5002	    			MOVF	STACK_2, 0, 0
$0F68	$2400	    			ADDWF	STACK_0, 0, 0
$0F6A	$6F2E	    			MOVWF	atoi_a_L0, 1
$0F6C	$5003	    			MOVF	STACK_2+1, 0, 0
$0F6E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$0F70	$6F2F	    			MOVWF	atoi_a_L0+1, 1
$0F72	$4B2B	    			INFSNZ	FARG_atoi+0, 1, 1
$0F74	$2B2C	    			INCF	FARG_atoi+1, 1, 1
$0F76	$D7D8	    			BRA	___atoi_conv_atoi
$0F78	$	L_atoi_59:
$0F78	$0101	    			MOVLB	1
$0F7A	$5330	    			MOVF	atoi_sign_L0, 1, 1
$0F7C	$E008	    			BZ	L_atoi_60
$0F7E	$512E	    			MOVF	atoi_a_L0, 0, 1
$0F80	$0800	    			SUBLW	0
$0F82	$6E00	    			MOVWF	STACK_0, 0
$0F84	$C12F	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$0F88	$6AE8	    			CLRF	WREG, 0
$0F8A	$5601	    			SUBFWB	STACK_0+1, 1, 0
$0F8C	$0012	    			RETURN
$0F8E	$	L_atoi_60:
$0F8E	$C12E	F000			MOVFF	atoi_a_L0, STACK_0
$0F92	$C12F	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$0F96	$0012	    			RETURN
$0F98	$	_initRegisters:
;cnc_control.c,472 :: 			void initRegisters(){
;cnc_control.c,474 :: 			TRISD = 0b11111111;  //inputs
$0F98	$0EFF	    			MOVLW	255
$0F9A	$6E95	    			MOVWF	TRISD, 0
;cnc_control.c,475 :: 			TRISC = 0b10000000; //rs-232, outputs
$0F9C	$0E80	    			MOVLW	128
$0F9E	$6E94	    			MOVWF	TRISC, 0
;cnc_control.c,476 :: 			TRISB = 0b11110000; //step inputs from pc
$0FA0	$0EF0	    			MOVLW	240
$0FA2	$6E93	    			MOVWF	TRISB, 0
;cnc_control.c,477 :: 			TRISA = 0b00000000;  //not used
$0FA4	$6A92	    			CLRF	TRISA, 0
;cnc_control.c,479 :: 			currentSteps = PORTB;
$0FA6	$CF81	F01D			MOVFF	PORTB, _currentSteps
;cnc_control.c,483 :: 			T0CON = 0b10000000;
$0FAA	$0E80	    			MOVLW	128
$0FAC	$6ED5	    			MOVWF	T0CON, 0
;cnc_control.c,486 :: 			INTCON.RBIE = 1;   //interrupt on portb changes
$0FAE	$86F2	    			BSF	INTCON, 3, 0
;cnc_control.c,487 :: 			INTCON2.RBIP=1; //portb change interttupt high priority
$0FB0	$80F1	    			BSF	INTCON2, 0, 0
;cnc_control.c,488 :: 			INTCON2.RBPU = 0; //enable portb pullups
$0FB2	$9EF1	    			BCF	INTCON2, 7, 0
;cnc_control.c,489 :: 			INTCON.TMR0IE = 1; //enable timer0 interrupts
$0FB4	$8AF2	    			BSF	INTCON, 5, 0
;cnc_control.c,490 :: 			INTCON2.TMR0IP = 0; //timer 0 low priority
$0FB6	$94F1	    			BCF	INTCON2, 2, 0
;cnc_control.c,491 :: 			}
$0FB8	$0012	    			RETURN
$0FBA	$	_printMessage:
;cnc_control.c,190 :: 			void printMessage(const char* msg ){
;cnc_control.c,191 :: 			USART_Write(13);
$0FBA	$0E0D	    			MOVLW	13
$0FBC	$0101	    			MOVLB	1
$0FBE	$6F56	    			MOVWF	FARG_Usart_Write+0, 1
$0FC0	$EC25	F002			CALL	_Usart_Write
;cnc_control.c,192 :: 			strConstCpy(txtBuffer,msg);
$0FC4	$0E2F	    			MOVLW	_txtBuffer
$0FC6	$0101	    			MOVLB	1
$0FC8	$6F2B	    			MOVWF	FARG_strConstCpy+0, 1
$0FCA	$0E00	    			MOVLW	@_txtBuffer
$0FCC	$6F2C	    			MOVWF	FARG_strConstCpy+1, 1
$0FCE	$C0C2	F12D			MOVFF	FARG_printMessage+0, FARG_strConstCpy+2
$0FD2	$C0C3	F12E			MOVFF	FARG_printMessage+1, FARG_strConstCpy+3
$0FD6	$C0C4	F12F			MOVFF	FARG_printMessage+2, FARG_strConstCpy+4
$0FDA	$ECC5	F006			CALL	_strConstCpy
;cnc_control.c,193 :: 			USART_Send_String(txtBuffer);
$0FDE	$0E2F	    			MOVLW	_txtBuffer
$0FE0	$0101	    			MOVLB	1
$0FE2	$6F3E	    			MOVWF	FARG_USART_Send_String+0, 1
$0FE4	$0E00	    			MOVLW	@_txtBuffer
$0FE6	$6F3F	    			MOVWF	FARG_USART_Send_String+1, 1
$0FE8	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,194 :: 			}
$0FEC	$0012	    			RETURN
$0FEE	$	_readMemory:
;cnc_control.c,225 :: 			unsigned short readMemory(){
;cnc_control.c,226 :: 			unsigned short size = sizeof ( multipliers );
$0FEE	$0E07	    			MOVLW	7
$0FF0	$0100	    			MOVLB	0
$0FF2	$6FC2	    			MOVWF	readMemory_size_L0, 1
;cnc_control.c,230 :: 			Eeprom_Read_Obj(0, &versionId,1 );
$0FF4	$0101	    			MOVLB	1
$0FF6	$6B2B	    			CLRF	FARG_Eeprom_Read_Obj+0, 1
$0FF8	$6B2C	    			CLRF	FARG_Eeprom_Read_Obj+1, 1
$0FFA	$0EC3	    			MOVLW	readMemory_versionId_L0
$0FFC	$6F2D	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$0FFE	$0E00	    			MOVLW	@readMemory_versionId_L0
$1000	$6F2E	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$1002	$0E01	    			MOVLW	1
$1004	$6F2F	    			MOVWF	FARG_Eeprom_Read_Obj+4, 1
$1006	$ECEE	F006			CALL	_Eeprom_Read_Obj
;cnc_control.c,231 :: 			if ( versionId == EEPROM_VERSION_ID ){
$100A	$0100	    			MOVLB	0
$100C	$51C3	    			MOVF	readMemory_versionId_L0, 0, 1
$100E	$1857	    			XORWF	_EEPROM_VERSION_ID, 0, 0
$1010	$E110	    			BNZ	L_readMemory_13
;cnc_control.c,232 :: 			Eeprom_Read_Obj(1,&multipliers,size );
$1012	$0E01	    			MOVLW	1
$1014	$0101	    			MOVLB	1
$1016	$6F2B	    			MOVWF	FARG_Eeprom_Read_Obj+0, 1
$1018	$0E00	    			MOVLW	0
$101A	$6F2C	    			MOVWF	FARG_Eeprom_Read_Obj+1, 1
$101C	$0E16	    			MOVLW	_multipliers
$101E	$6F2D	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$1020	$0E00	    			MOVLW	@_multipliers
$1022	$6F2E	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$1024	$C0C2	F12F			MOVFF	readMemory_size_L0, FARG_Eeprom_Read_Obj+4
$1028	$ECEE	F006			CALL	_Eeprom_Read_Obj
;cnc_control.c,233 :: 			return 1;
$102C	$0E01	    			MOVLW	1
$102E	$6E00	    			MOVWF	STACK_0, 0
$1030	$0012	    			RETURN
;cnc_control.c,234 :: 			}
$1032	$	L_readMemory_13:
;cnc_control.c,236 :: 			return 0;
$1032	$6A00	    			CLRF	STACK_0, 0
;cnc_control.c,238 :: 			}
$1034	$0012	    			RETURN
$1036	$	_Usart_Data_Ready:
$1036	$6A01	    			CLRF	STACK_1, 0
$1038	$BA9E	    			BTFSC	PIR1, 5, 0
$103A	$2A01	    			INCF	STACK_1, 1, 0
$103C	$C001	F000			MOVFF	STACK_1, STACK_0
$1040	$0012	    			RETURN
$1042	$	_Usart_Read:
$1042	$CFAE	F0C2			MOVFF	RCREG, Usart_Read_tmp_L0
$1046	$A2AB	    			BTFSS	RCSTA, 1, 0
$1048	$D002	    			BRA	L_Usart_Read_2
$104A	$98AB	    			BCF	RCSTA, 4, 0
$104C	$88AB	    			BSF	RCSTA, 4, 0
$104E	$	L_Usart_Read_2:
$104E	$C0C2	F000			MOVFF	Usart_Read_tmp_L0, STACK_0
$1052	$0012	    			RETURN
$1054	$	_pushChar:
;cnc_control.c,169 :: 			int pushChar ( char ch ){
;cnc_control.c,170 :: 			if ( ch == 10u || ch == 13u){
$1054	$0100	    			MOVLB	0
$1056	$51C2	    			MOVF	FARG_pushChar+0, 0, 1
$1058	$0A0A	    			XORLW	10
$105A	$E003	    			BZ	L38_ex_L_pushChar_6
$105C	$51C2	    			MOVF	FARG_pushChar+0, 0, 1
$105E	$0A0D	    			XORLW	13
$1060	$E116	    			BNZ	L_pushChar_6
$1062	$	L38_ex_L_pushChar_6:
;cnc_control.c,172 :: 			cmdBuffer[txtPos] = 0;
$1062	$0E58	    			MOVLW	_cmdBuffer
$1064	$6EE1	    			MOVWF	FSR1L, 0
$1066	$0E00	    			MOVLW	@_cmdBuffer
$1068	$6EE2	    			MOVWF	FSR1L+1, 0
$106A	$0100	    			MOVLB	0
$106C	$5180	    			MOVF	_txtPos, 0, 1
$106E	$26E1	    			ADDWF	FSR1L, 1, 0
$1070	$B0D8	    			BTFSC	STATUS, C, 0
$1072	$2AE2	    			INCF	FSR1L+1, 1, 0
$1074	$6AE6	    			CLRF	POSTINC1, 0
;cnc_control.c,173 :: 			if ( txtPos > 0u ){
$1076	$5180	    			MOVF	_txtPos, 0, 1
$1078	$0800	    			SUBLW	0
$107A	$E206	    			BC	L_pushChar_7
;cnc_control.c,174 :: 			txtPos = 0;
$107C	$6B80	    			CLRF	_txtPos, 1
;cnc_control.c,175 :: 			return 1u;
$107E	$0E01	    			MOVLW	1
$1080	$6E00	    			MOVWF	STACK_0, 0
$1082	$0E00	    			MOVLW	0
$1084	$6E01	    			MOVWF	STACK_0+1, 0
$1086	$0012	    			RETURN
;cnc_control.c,176 :: 			}
$1088	$	L_pushChar_7:
;cnc_control.c,178 :: 			return 0u;
$1088	$6A00	    			CLRF	STACK_0, 0
$108A	$6A01	    			CLRF	STACK_0+1, 0
$108C	$0012	    			RETURN
;cnc_control.c,181 :: 			}
$108E	$	L_pushChar_6:
;cnc_control.c,183 :: 			Usart_write(ch);  //enable this line to echo input
$108E	$C0C2	F156			MOVFF	FARG_pushChar+0, FARG_Usart_Write+0
$1092	$EC25	F002			CALL	_Usart_Write
;cnc_control.c,184 :: 			cmdBuffer[txtPos] = ch;
$1096	$0E58	    			MOVLW	_cmdBuffer
$1098	$6EE1	    			MOVWF	FSR1L, 0
$109A	$0E00	    			MOVLW	@_cmdBuffer
$109C	$6EE2	    			MOVWF	FSR1L+1, 0
$109E	$0100	    			MOVLB	0
$10A0	$5180	    			MOVF	_txtPos, 0, 1
$10A2	$26E1	    			ADDWF	FSR1L, 1, 0
$10A4	$B0D8	    			BTFSC	STATUS, C, 0
$10A6	$2AE2	    			INCF	FSR1L+1, 1, 0
$10A8	$C0C2	FFE6			MOVFF	FARG_pushChar+0, POSTINC1
;cnc_control.c,185 :: 			txtPos++;
$10AC	$2B80	    			INCF	_txtPos, 1, 1
;cnc_control.c,186 :: 			return 0;
$10AE	$6A00	    			CLRF	STACK_0, 0
$10B0	$6A01	    			CLRF	STACK_0+1, 0
;cnc_control.c,188 :: 			}
$10B2	$0012	    			RETURN
$10B4	$	_commandMatches:
;cnc_control.c,262 :: 			unsigned short commandMatches(const char *source ){
;cnc_control.c,263 :: 			char *cmdptr = cmdBuffer;
$10B4	$0E58	    			MOVLW	_cmdBuffer
$10B6	$0100	    			MOVLB	0
$10B8	$6FC5	    			MOVWF	commandMatches_cmdptr_L0, 1
$10BA	$0E00	    			MOVLW	@_cmdBuffer
$10BC	$6FC6	    			MOVWF	commandMatches_cmdptr_L0+1, 1
;cnc_control.c,264 :: 			while(*source && *cmdptr ){
$10BE	$	L_commandMatches_15:
$10BE	$C0C2	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$10C2	$C0C3	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$10C6	$C0C4	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$10CA	$0009	    			TBLRD*+
$10CC	$CFF5	F000			MOVFF	TABLAT, STACK_0
$10D0	$5200	    			MOVF	STACK_0, 1, 0
$10D2	$E025	    			BZ	L_commandMatches_16
$10D4	$C0C5	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$10D8	$C0C6	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$10DC	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$10E0	$5200	    			MOVF	STACK_0, 1, 0
$10E2	$E01D	    			BZ	L_commandMatches_16
$10E4	$	L164_ex_L_commandMatches_16:
;cnc_control.c,265 :: 			if ( *cmdptr != *source )
$10E4	$C0C5	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$10E8	$C0C6	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$10EC	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$10F0	$C0C2	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$10F4	$C0C3	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$10F8	$C0C4	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$10FC	$0009	    			TBLRD*+
$10FE	$CFF5	F001			MOVFF	TABLAT, STACK_1
$1102	$5002	    			MOVF	STACK_2, 0, 0
$1104	$1801	    			XORWF	STACK_1, 0, 0
$1106	$E002	    			BZ	L_commandMatches_19
;cnc_control.c,266 :: 			return 0;
$1108	$6A00	    			CLRF	STACK_0, 0
$110A	$0012	    			RETURN
$110C	$	L_commandMatches_19:
;cnc_control.c,267 :: 			cmdptr++;
$110C	$0100	    			MOVLB	0
$110E	$4BC5	    			INFSNZ	commandMatches_cmdptr_L0, 1, 1
$1110	$2BC6	    			INCF	commandMatches_cmdptr_L0+1, 1, 1
;cnc_control.c,268 :: 			source++;
$1112	$0E01	    			MOVLW	1
$1114	$27C2	    			ADDWF	FARG_commandMatches+0, 1, 1
$1116	$0E00	    			MOVLW	0
$1118	$23C3	    			ADDWFC	FARG_commandMatches+1, 1, 1
$111A	$23C4	    			ADDWFC	FARG_commandMatches+2, 1, 1
;cnc_control.c,269 :: 			}
$111C	$D7D0	    			BRA	L_commandMatches_15
$111E	$	L_commandMatches_16:
;cnc_control.c,270 :: 			return 1;
$111E	$0E01	    			MOVLW	1
$1120	$6E00	    			MOVWF	STACK_0, 0
;cnc_control.c,271 :: 			}
$1122	$0012	    			RETURN
$1124	$	_printStatus:
$1124	$0E0A	    			MOVLW	10
$1126	$0100	    			MOVLB	0
$1128	$6FC2	    			MOVWF	lstr20_cnc_control+0, 1
$112A	$0E43	    			MOVLW	67
$112C	$6FC3	    			MOVWF	lstr20_cnc_control+1, 1
$112E	$0E4E	    			MOVLW	78
$1130	$6FC4	    			MOVWF	lstr20_cnc_control+2, 1
$1132	$0E43	    			MOVLW	67
$1134	$6FC5	    			MOVWF	lstr20_cnc_control+3, 1
$1136	$0E20	    			MOVLW	32
$1138	$6FC6	    			MOVWF	lstr20_cnc_control+4, 1
$113A	$0E43	    			MOVLW	67
$113C	$6FC7	    			MOVWF	lstr20_cnc_control+5, 1
$113E	$0E6F	    			MOVLW	111
$1140	$6FC8	    			MOVWF	lstr20_cnc_control+6, 1
$1142	$0E6E	    			MOVLW	110
$1144	$6FC9	    			MOVWF	lstr20_cnc_control+7, 1
$1146	$0E74	    			MOVLW	116
$1148	$6FCA	    			MOVWF	lstr20_cnc_control+8, 1
$114A	$0E72	    			MOVLW	114
$114C	$6FCB	    			MOVWF	lstr20_cnc_control+9, 1
$114E	$0E6F	    			MOVLW	111
$1150	$6FCC	    			MOVWF	lstr20_cnc_control+10, 1
$1152	$0E6C	    			MOVLW	108
$1154	$6FCD	    			MOVWF	lstr20_cnc_control+11, 1
$1156	$0E6C	    			MOVLW	108
$1158	$6FCE	    			MOVWF	lstr20_cnc_control+12, 1
$115A	$0E65	    			MOVLW	101
$115C	$6FCF	    			MOVWF	lstr20_cnc_control+13, 1
$115E	$0E72	    			MOVLW	114
$1160	$6FD0	    			MOVWF	lstr20_cnc_control+14, 1
$1162	$0E20	    			MOVLW	32
$1164	$6FD1	    			MOVWF	lstr20_cnc_control+15, 1
$1166	$0E53	    			MOVLW	83
$1168	$6FD2	    			MOVWF	lstr20_cnc_control+16, 1
$116A	$0E74	    			MOVLW	116
$116C	$6FD3	    			MOVWF	lstr20_cnc_control+17, 1
$116E	$0E61	    			MOVLW	97
$1170	$6FD4	    			MOVWF	lstr20_cnc_control+18, 1
$1172	$0E74	    			MOVLW	116
$1174	$6FD5	    			MOVWF	lstr20_cnc_control+19, 1
$1176	$0E75	    			MOVLW	117
$1178	$6FD6	    			MOVWF	lstr20_cnc_control+20, 1
$117A	$0E73	    			MOVLW	115
$117C	$6FD7	    			MOVWF	lstr20_cnc_control+21, 1
$117E	$0E3A	    			MOVLW	58
$1180	$6FD8	    			MOVWF	lstr20_cnc_control+22, 1
$1182	$0E0A	    			MOVLW	10
$1184	$6FD9	    			MOVWF	lstr20_cnc_control+23, 1
$1186	$6BDA	    			CLRF	lstr20_cnc_control+24, 1
$1188	$0E65	    			MOVLW	101
$118A	$6FDB	    			MOVWF	lstr21_cnc_control+0, 1
$118C	$0E72	    			MOVLW	114
$118E	$6FDC	    			MOVWF	lstr21_cnc_control+1, 1
$1190	$0E72	    			MOVLW	114
$1192	$6FDD	    			MOVWF	lstr21_cnc_control+2, 1
$1194	$0E3D	    			MOVLW	61
$1196	$6FDE	    			MOVWF	lstr21_cnc_control+3, 1
$1198	$6BDF	    			CLRF	lstr21_cnc_control+4, 1
$119A	$0E78	    			MOVLW	120
$119C	$6FE0	    			MOVWF	lstr22_cnc_control+0, 1
$119E	$0E6D	    			MOVLW	109
$11A0	$6FE1	    			MOVWF	lstr22_cnc_control+1, 1
$11A2	$0E75	    			MOVLW	117
$11A4	$6FE2	    			MOVWF	lstr22_cnc_control+2, 1
$11A6	$0E6C	    			MOVLW	108
$11A8	$6FE3	    			MOVWF	lstr22_cnc_control+3, 1
$11AA	$0E74	    			MOVLW	116
$11AC	$6FE4	    			MOVWF	lstr22_cnc_control+4, 1
$11AE	$0E3D	    			MOVLW	61
$11B0	$6FE5	    			MOVWF	lstr22_cnc_control+5, 1
$11B2	$6BE6	    			CLRF	lstr22_cnc_control+6, 1
$11B4	$0E79	    			MOVLW	121
$11B6	$6FE7	    			MOVWF	lstr23_cnc_control+0, 1
$11B8	$0E6D	    			MOVLW	109
$11BA	$6FE8	    			MOVWF	lstr23_cnc_control+1, 1
$11BC	$0E75	    			MOVLW	117
$11BE	$6FE9	    			MOVWF	lstr23_cnc_control+2, 1
$11C0	$0E6C	    			MOVLW	108
$11C2	$6FEA	    			MOVWF	lstr23_cnc_control+3, 1
$11C4	$0E74	    			MOVLW	116
$11C6	$6FEB	    			MOVWF	lstr23_cnc_control+4, 1
$11C8	$0E3D	    			MOVLW	61
$11CA	$6FEC	    			MOVWF	lstr23_cnc_control+5, 1
$11CC	$6BED	    			CLRF	lstr23_cnc_control+6, 1
$11CE	$0E7A	    			MOVLW	122
$11D0	$6FEE	    			MOVWF	lstr24_cnc_control+0, 1
$11D2	$0E6D	    			MOVLW	109
$11D4	$6FEF	    			MOVWF	lstr24_cnc_control+1, 1
$11D6	$0E75	    			MOVLW	117
$11D8	$6FF0	    			MOVWF	lstr24_cnc_control+2, 1
$11DA	$0E6C	    			MOVLW	108
$11DC	$6FF1	    			MOVWF	lstr24_cnc_control+3, 1
$11DE	$0E74	    			MOVLW	116
$11E0	$6FF2	    			MOVWF	lstr24_cnc_control+4, 1
$11E2	$0E3D	    			MOVLW	61
$11E4	$6FF3	    			MOVWF	lstr24_cnc_control+5, 1
$11E6	$6BF4	    			CLRF	lstr24_cnc_control+6, 1
$11E8	$0E61	    			MOVLW	97
$11EA	$6FF5	    			MOVWF	lstr25_cnc_control+0, 1
$11EC	$0E6D	    			MOVLW	109
$11EE	$6FF6	    			MOVWF	lstr25_cnc_control+1, 1
$11F0	$0E75	    			MOVLW	117
$11F2	$6FF7	    			MOVWF	lstr25_cnc_control+2, 1
$11F4	$0E6C	    			MOVLW	108
$11F6	$6FF8	    			MOVWF	lstr25_cnc_control+3, 1
$11F8	$0E74	    			MOVLW	116
$11FA	$6FF9	    			MOVWF	lstr25_cnc_control+4, 1
$11FC	$0E3D	    			MOVLW	61
$11FE	$6FFA	    			MOVWF	lstr25_cnc_control+5, 1
$1200	$6BFB	    			CLRF	lstr25_cnc_control+6, 1
$1202	$0E6D	    			MOVLW	109
$1204	$6FFC	    			MOVWF	lstr26_cnc_control+0, 1
$1206	$0E75	    			MOVLW	117
$1208	$6FFD	    			MOVWF	lstr26_cnc_control+1, 1
$120A	$0E6C	    			MOVLW	108
$120C	$6FFE	    			MOVWF	lstr26_cnc_control+2, 1
$120E	$0E74	    			MOVLW	116
$1210	$6FFF	    			MOVWF	lstr26_cnc_control+3, 1
$1212	$0E69	    			MOVLW	105
$1214	$0101	    			MOVLB	1
$1216	$6F00	    			MOVWF	lstr26_cnc_control+4, 1
$1218	$0E70	    			MOVLW	112
$121A	$6F01	    			MOVWF	lstr26_cnc_control+5, 1
$121C	$0E6C	    			MOVLW	108
$121E	$6F02	    			MOVWF	lstr26_cnc_control+6, 1
$1220	$0E69	    			MOVLW	105
$1222	$6F03	    			MOVWF	lstr26_cnc_control+7, 1
$1224	$0E65	    			MOVLW	101
$1226	$6F04	    			MOVWF	lstr26_cnc_control+8, 1
$1228	$0E72	    			MOVLW	114
$122A	$6F05	    			MOVWF	lstr26_cnc_control+9, 1
$122C	$0E20	    			MOVLW	32
$122E	$6F06	    			MOVWF	lstr26_cnc_control+10, 1
$1230	$0E65	    			MOVLW	101
$1232	$6F07	    			MOVWF	lstr26_cnc_control+11, 1
$1234	$0E6E	    			MOVLW	110
$1236	$6F08	    			MOVWF	lstr26_cnc_control+12, 1
$1238	$0E61	    			MOVLW	97
$123A	$6F09	    			MOVWF	lstr26_cnc_control+13, 1
$123C	$0E62	    			MOVLW	98
$123E	$6F0A	    			MOVWF	lstr26_cnc_control+14, 1
$1240	$0E6C	    			MOVLW	108
$1242	$6F0B	    			MOVWF	lstr26_cnc_control+15, 1
$1244	$0E65	    			MOVLW	101
$1246	$6F0C	    			MOVWF	lstr26_cnc_control+16, 1
$1248	$0E3D	    			MOVLW	61
$124A	$6F0D	    			MOVWF	lstr26_cnc_control+17, 1
$124C	$6B0E	    			CLRF	lstr26_cnc_control+18, 1
$124E	$0E73	    			MOVLW	115
$1250	$6F0F	    			MOVWF	lstr27_cnc_control+0, 1
$1252	$0E74	    			MOVLW	116
$1254	$6F10	    			MOVWF	lstr27_cnc_control+1, 1
$1256	$0E65	    			MOVLW	101
$1258	$6F11	    			MOVWF	lstr27_cnc_control+2, 1
$125A	$0E70	    			MOVLW	112
$125C	$6F12	    			MOVWF	lstr27_cnc_control+3, 1
$125E	$0E72	    			MOVLW	114
$1260	$6F13	    			MOVWF	lstr27_cnc_control+4, 1
$1262	$0E61	    			MOVLW	97
$1264	$6F14	    			MOVWF	lstr27_cnc_control+5, 1
$1266	$0E74	    			MOVLW	116
$1268	$6F15	    			MOVWF	lstr27_cnc_control+6, 1
$126A	$0E65	    			MOVLW	101
$126C	$6F16	    			MOVWF	lstr27_cnc_control+7, 1
$126E	$0E3D	    			MOVLW	61
$1270	$6F17	    			MOVWF	lstr27_cnc_control+8, 1
$1272	$6B18	    			CLRF	lstr27_cnc_control+9, 1
$1274	$0E0A	    			MOVLW	10
$1276	$6F19	    			MOVWF	lstr28_cnc_control+0, 1
$1278	$0E43	    			MOVLW	67
$127A	$6F1A	    			MOVWF	lstr28_cnc_control+1, 1
$127C	$0E75	    			MOVLW	117
$127E	$6F1B	    			MOVWF	lstr28_cnc_control+2, 1
$1280	$0E72	    			MOVLW	114
$1282	$6F1C	    			MOVWF	lstr28_cnc_control+3, 1
$1284	$0E72	    			MOVLW	114
$1286	$6F1D	    			MOVWF	lstr28_cnc_control+4, 1
$1288	$0E65	    			MOVLW	101
$128A	$6F1E	    			MOVWF	lstr28_cnc_control+5, 1
$128C	$0E6E	    			MOVLW	110
$128E	$6F1F	    			MOVWF	lstr28_cnc_control+6, 1
$1290	$0E74	    			MOVLW	116
$1292	$6F20	    			MOVWF	lstr28_cnc_control+7, 1
$1294	$0E20	    			MOVLW	32
$1296	$6F21	    			MOVWF	lstr28_cnc_control+8, 1
$1298	$0E53	    			MOVLW	83
$129A	$6F22	    			MOVWF	lstr28_cnc_control+9, 1
$129C	$0E74	    			MOVLW	116
$129E	$6F23	    			MOVWF	lstr28_cnc_control+10, 1
$12A0	$0E61	    			MOVLW	97
$12A2	$6F24	    			MOVWF	lstr28_cnc_control+11, 1
$12A4	$0E74	    			MOVLW	116
$12A6	$6F25	    			MOVWF	lstr28_cnc_control+12, 1
$12A8	$0E75	    			MOVLW	117
$12AA	$6F26	    			MOVWF	lstr28_cnc_control+13, 1
$12AC	$0E73	    			MOVLW	115
$12AE	$6F27	    			MOVWF	lstr28_cnc_control+14, 1
$12B0	$0E3A	    			MOVLW	58
$12B2	$6F28	    			MOVWF	lstr28_cnc_control+15, 1
$12B4	$0E20	    			MOVLW	32
$12B6	$6F29	    			MOVWF	lstr28_cnc_control+16, 1
$12B8	$6B2A	    			CLRF	lstr28_cnc_control+17, 1
;cnc_control.c,211 :: 			void printStatus(){
;cnc_control.c,212 :: 			USART_Send_String("\nCNC Controller Status:\n");
$12BA	$0EC2	    			MOVLW	lstr20_cnc_control
$12BC	$6F3E	    			MOVWF	FARG_USART_Send_String+0, 1
$12BE	$0E00	    			MOVLW	@lstr20_cnc_control
$12C0	$6F3F	    			MOVWF	FARG_USART_Send_String+1, 1
$12C2	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,213 :: 			printFloat("err=", statusError );
$12C6	$0EDB	    			MOVLW	lstr21_cnc_control
$12C8	$0101	    			MOVLB	1
$12CA	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$12CC	$0E00	    			MOVLW	@lstr21_cnc_control
$12CE	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$12D0	$C015	F000			MOVFF	_statusError, STACK_0
$12D4	$EC27	F007			CALL	_byte2double
$12D8	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$12DC	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$12E0	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$12E4	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$12E8	$EC0A	F007			CALL	_printFloat
;cnc_control.c,214 :: 			printFloat("xmult=",multipliers.x);
$12EC	$0EE0	    			MOVLW	lstr22_cnc_control
$12EE	$0101	    			MOVLB	1
$12F0	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$12F2	$0E00	    			MOVLW	@lstr22_cnc_control
$12F4	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$12F6	$C016	F000			MOVFF	_multipliers+0, STACK_0
$12FA	$EC27	F007			CALL	_byte2double
$12FE	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$1302	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$1306	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$130A	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$130E	$EC0A	F007			CALL	_printFloat
;cnc_control.c,215 :: 			printFloat("ymult=",multipliers.y);
$1312	$0EE7	    			MOVLW	lstr23_cnc_control
$1314	$0101	    			MOVLB	1
$1316	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$1318	$0E00	    			MOVLW	@lstr23_cnc_control
$131A	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$131C	$C017	F000			MOVFF	_multipliers+1, STACK_0
$1320	$EC27	F007			CALL	_byte2double
$1324	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$1328	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$132C	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$1330	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$1334	$EC0A	F007			CALL	_printFloat
;cnc_control.c,216 :: 			printFloat("zmult=",multipliers.z);
$1338	$0EEE	    			MOVLW	lstr24_cnc_control
$133A	$0101	    			MOVLB	1
$133C	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$133E	$0E00	    			MOVLW	@lstr24_cnc_control
$1340	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$1342	$C018	F000			MOVFF	_multipliers+2, STACK_0
$1346	$EC27	F007			CALL	_byte2double
$134A	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$134E	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$1352	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$1356	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$135A	$EC0A	F007			CALL	_printFloat
;cnc_control.c,217 :: 			printFloat("amult=",multipliers.a);
$135E	$0EF5	    			MOVLW	lstr25_cnc_control
$1360	$0101	    			MOVLB	1
$1362	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$1364	$0E00	    			MOVLW	@lstr25_cnc_control
$1366	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$1368	$C019	F000			MOVFF	_multipliers+3, STACK_0
$136C	$EC27	F007			CALL	_byte2double
$1370	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$1374	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$1378	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$137C	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$1380	$EC0A	F007			CALL	_printFloat
;cnc_control.c,218 :: 			printFloat("multiplier enable=",multipliers.enable);
$1384	$0EFC	    			MOVLW	lstr26_cnc_control
$1386	$0101	    			MOVLB	1
$1388	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$138A	$0E00	    			MOVLW	@lstr26_cnc_control
$138C	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$138E	$C01A	F000			MOVFF	_multipliers+4, STACK_0
$1392	$EC27	F007			CALL	_byte2double
$1396	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$139A	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$139E	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$13A2	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$13A6	$EC0A	F007			CALL	_printFloat
;cnc_control.c,219 :: 			printFloat("steprate=",multipliers.delayCycles);
$13AA	$0E0F	    			MOVLW	lstr27_cnc_control
$13AC	$0101	    			MOVLB	1
$13AE	$6F2B	    			MOVWF	FARG_printFloat+0, 1
$13B0	$0E01	    			MOVLW	@lstr27_cnc_control
$13B2	$6F2C	    			MOVWF	FARG_printFloat+1, 1
$13B4	$C01B	F000			MOVFF	_multipliers+5, STACK_0
$13B8	$EC27	F007			CALL	_byte2double
$13BC	$C000	F12D			MOVFF	STACK_0, FARG_printFloat+2
$13C0	$C001	F12E			MOVFF	STACK_0+1, FARG_printFloat+3
$13C4	$C002	F12F			MOVFF	STACK_0+2, FARG_printFloat+4
$13C8	$C003	F130			MOVFF	STACK_0+3, FARG_printFloat+5
$13CC	$EC0A	F007			CALL	_printFloat
;cnc_control.c,220 :: 			USART_Send_String("\nCurrent Status: ");
$13D0	$0E19	    			MOVLW	lstr28_cnc_control
$13D2	$0101	    			MOVLB	1
$13D4	$6F3E	    			MOVWF	FARG_USART_Send_String+0, 1
$13D6	$0E01	    			MOVLW	@lstr28_cnc_control
$13D8	$6F3F	    			MOVWF	FARG_USART_Send_String+1, 1
$13DA	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,221 :: 			USART_Send_String(currentStatus);
$13DE	$C01E	F13E			MOVFF	_currentStatus, FARG_USART_Send_String+0
$13E2	$C01F	F13F			MOVFF	_currentStatus+1, FARG_USART_Send_String+1
$13E6	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,222 :: 			}
$13EA	$0012	    			RETURN
$13EC	$	_writeMemory:
;cnc_control.c,240 :: 			void writeMemory(){
;cnc_control.c,241 :: 			unsigned short size = sizeof( multipliers );
$13EC	$0E07	    			MOVLW	7
$13EE	$0100	    			MOVLB	0
$13F0	$6FC2	    			MOVWF	writeMemory_size_L0, 1
;cnc_control.c,243 :: 			EEprom_Write_Obj(0,&EEPROM_VERSION_ID,1);
$13F2	$0101	    			MOVLB	1
$13F4	$6B2B	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$13F6	$6B2C	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$13F8	$0E57	    			MOVLW	_EEPROM_VERSION_ID
$13FA	$6F2D	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$13FC	$0E00	    			MOVLW	@_EEPROM_VERSION_ID
$13FE	$6F2E	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$1400	$0E01	    			MOVLW	1
$1402	$6F2F	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$1404	$EC37	F007			CALL	_Eeprom_Write_Obj
;cnc_control.c,246 :: 			EEprom_Write_Obj(1,&multipliers,size);
$1408	$0E01	    			MOVLW	1
$140A	$0101	    			MOVLB	1
$140C	$6F2B	    			MOVWF	FARG_Eeprom_Write_Obj+0, 1
$140E	$0E00	    			MOVLW	0
$1410	$6F2C	    			MOVWF	FARG_Eeprom_Write_Obj+1, 1
$1412	$0E16	    			MOVLW	_multipliers
$1414	$6F2D	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$1416	$0E00	    			MOVLW	@_multipliers
$1418	$6F2E	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$141A	$C0C2	F12F			MOVFF	writeMemory_size_L0, FARG_Eeprom_Write_Obj+4
$141E	$EC37	F007			CALL	_Eeprom_Write_Obj
;cnc_control.c,248 :: 			}
$1422	$0012	    			RETURN
$1424	$	_clearMemory:
;cnc_control.c,250 :: 			void clearMemory(){
;cnc_control.c,253 :: 			unsigned short blank = 0xFF;
$1424	$0EFF	    			MOVLW	255
$1426	$0100	    			MOVLB	0
$1428	$6FC2	    			MOVWF	clearMemory_blank_L0, 1
;cnc_control.c,254 :: 			EEprom_Write_Obj(0,&blank,1);
$142A	$0101	    			MOVLB	1
$142C	$6B2B	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$142E	$6B2C	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$1430	$0EC2	    			MOVLW	clearMemory_blank_L0
$1432	$6F2D	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$1434	$0E00	    			MOVLW	@clearMemory_blank_L0
$1436	$6F2E	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$1438	$0E01	    			MOVLW	1
$143A	$6F2F	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$143C	$EC37	F007			CALL	_Eeprom_Write_Obj
;cnc_control.c,255 :: 			}
$1440	$0012	    			RETURN
$1442	$	_findIntValue:
;cnc_control.c,279 :: 			int findIntValue ( char *buffer){
;cnc_control.c,282 :: 			char *ptr = strchr(buffer,'=');
$1442	$C0C2	F12B			MOVFF	FARG_findIntValue+0, FARG_strchr+0
$1446	$C0C3	F12C			MOVFF	FARG_findIntValue+1, FARG_strchr+1
$144A	$0E3D	    			MOVLW	61
$144C	$0101	    			MOVLB	1
$144E	$6F2D	    			MOVWF	FARG_strchr+2, 1
$1450	$EC53	F007			CALL	_strchr
$1454	$C000	F0C4			MOVFF	STACK_0, findIntValue_ptr_L0
$1458	$C001	F0C5			MOVFF	STACK_0+1, findIntValue_ptr_L0+1
;cnc_control.c,283 :: 			return atoi(++ptr);
$145C	$0E01	    			MOVLW	1
$145E	$2400	    			ADDWF	STACK_0, 0, 0
$1460	$0100	    			MOVLB	0
$1462	$6FC4	    			MOVWF	findIntValue_ptr_L0, 1
$1464	$0E00	    			MOVLW	0
$1466	$2001	    			ADDWFC	STACK_0+1, 0, 0
$1468	$6FC5	    			MOVWF	findIntValue_ptr_L0+1, 1
$146A	$C0C4	F12B			MOVFF	findIntValue_ptr_L0, FARG_atoi+0
$146E	$C0C5	F12C			MOVFF	findIntValue_ptr_L0+1, FARG_atoi+1
$1472	$EC70	F007			CALL	_atoi
;cnc_control.c,284 :: 			}
$1476	$0012	    			RETURN
$1478	$	GlobalInicnc_control:
$1478	$0EFF	    			MOVLW	255
$147A	$0100	    			MOVLB	0
$147C	$6F81	    			MOVWF	_buffer+0, 1
$147E	$0E00	    			MOVLW	0
$1480	$6F80	    			MOVWF	_txtPos+0, 1
$1482	$0E16	    			MOVLW	#lstr_1_cnc_control
$1484	$6F82	    			MOVWF	_splash+0, 1
$1486	$0E18	    			MOVLW	@#lstr_1_cnc_control
$1488	$6F83	    			MOVWF	_splash+1, 1
$148A	$0E00	    			MOVLW	@@#lstr_1_cnc_control
$148C	$6F84	    			MOVWF	_splash+2, 1
$148E	$0E2C	    			MOVLW	#lstr_2_cnc_control
$1490	$6F85	    			MOVWF	_cmdPrompt+0, 1
$1492	$0E18	    			MOVLW	@#lstr_2_cnc_control
$1494	$6F86	    			MOVWF	_cmdPrompt+1, 1
$1496	$0E00	    			MOVLW	@@#lstr_2_cnc_control
$1498	$6F87	    			MOVWF	_cmdPrompt+2, 1
$149A	$0E34	    			MOVLW	#lstr_3_cnc_control
$149C	$6F88	    			MOVWF	_noEeprom+0, 1
$149E	$0E18	    			MOVLW	@#lstr_3_cnc_control
$14A0	$6F89	    			MOVWF	_noEeprom+1, 1
$14A2	$0E00	    			MOVLW	@@#lstr_3_cnc_control
$14A4	$6F8A	    			MOVWF	_noEeprom+2, 1
$14A6	$0E46	    			MOVLW	#lstr_4_cnc_control
$14A8	$6F8B	    			MOVWF	_unknownCommand+0, 1
$14AA	$0E18	    			MOVLW	@#lstr_4_cnc_control
$14AC	$6F8C	    			MOVWF	_unknownCommand+1, 1
$14AE	$0E00	    			MOVLW	@@#lstr_4_cnc_control
$14B0	$6F8D	    			MOVWF	_unknownCommand+2, 1
$14B2	$0E4A	    			MOVLW	#lstr_5_cnc_control
$14B4	$6E20	    			MOVWF	_msg_atLimits+0, 0
$14B6	$0E18	    			MOVLW	@#lstr_5_cnc_control
$14B8	$6E21	    			MOVWF	_msg_atLimits+1, 0
$14BA	$0E00	    			MOVLW	@@#lstr_5_cnc_control
$14BC	$6E22	    			MOVWF	_msg_atLimits+2, 0
$14BE	$0E56	    			MOVLW	#lstr_6_cnc_control
$14C0	$6E23	    			MOVWF	_msg_eStop+0, 0
$14C2	$0E18	    			MOVLW	@#lstr_6_cnc_control
$14C4	$6E24	    			MOVWF	_msg_eStop+1, 0
$14C6	$0E00	    			MOVLW	@@#lstr_6_cnc_control
$14C8	$6E25	    			MOVWF	_msg_eStop+2, 0
$14CA	$0E5E	    			MOVLW	#lstr_7_cnc_control
$14CC	$6E29	    			MOVWF	_msg_servoFault+0, 0
$14CE	$0E18	    			MOVLW	@#lstr_7_cnc_control
$14D0	$6E2A	    			MOVWF	_msg_servoFault+1, 0
$14D2	$0E00	    			MOVLW	@@#lstr_7_cnc_control
$14D4	$6E2B	    			MOVWF	_msg_servoFault+2, 0
$14D6	$0E6A	    			MOVLW	#lstr_8_cnc_control
$14D8	$6E2C	    			MOVWF	_msg_ok+0, 0
$14DA	$0E18	    			MOVLW	@#lstr_8_cnc_control
$14DC	$6E2D	    			MOVWF	_msg_ok+1, 0
$14DE	$0E00	    			MOVLW	@@#lstr_8_cnc_control
$14E0	$6E2E	    			MOVWF	_msg_ok+2, 0
$14E2	$0E6E	    			MOVLW	#lstr_9_cnc_control
$14E4	$6E26	    			MOVWF	_msg_disabled+0, 0
$14E6	$0E18	    			MOVLW	@#lstr_9_cnc_control
$14E8	$6E27	    			MOVWF	_msg_disabled+1, 0
$14EA	$0E00	    			MOVLW	@@#lstr_9_cnc_control
$14EC	$6E28	    			MOVWF	_msg_disabled+2, 0
$14EE	$0E70	    			MOVLW	112
$14F0	$6E57	    			MOVWF	_EEPROM_VERSION_ID+0, 0
$14F2	$0E78	    			MOVLW	#lstr_10_cnc_control
$14F4	$6F8E	    			MOVWF	_cmd_status+0, 1
$14F6	$0E18	    			MOVLW	@#lstr_10_cnc_control
$14F8	$6F8F	    			MOVWF	_cmd_status+1, 1
$14FA	$0E00	    			MOVLW	@@#lstr_10_cnc_control
$14FC	$6F90	    			MOVWF	_cmd_status+2, 1
$14FE	$0E7A	    			MOVLW	#lstr_11_cnc_control
$1500	$6F91	    			MOVWF	_cmd_saveEEprom+0, 1
$1502	$0E18	    			MOVLW	@#lstr_11_cnc_control
$1504	$6F92	    			MOVWF	_cmd_saveEEprom+1, 1
$1506	$0E00	    			MOVLW	@@#lstr_11_cnc_control
$1508	$6F93	    			MOVWF	_cmd_saveEEprom+2, 1
$150A	$0E7E	    			MOVLW	#lstr_12_cnc_control
$150C	$6F94	    			MOVWF	_cmd_readEEprom+0, 1
$150E	$0E18	    			MOVLW	@#lstr_12_cnc_control
$1510	$6F95	    			MOVWF	_cmd_readEEprom+1, 1
$1512	$0E00	    			MOVLW	@@#lstr_12_cnc_control
$1514	$6F96	    			MOVWF	_cmd_readEEprom+2, 1
$1516	$0E82	    			MOVLW	#lstr_13_cnc_control
$1518	$6F97	    			MOVWF	_cmd_defaults+0, 1
$151A	$0E18	    			MOVLW	@#lstr_13_cnc_control
$151C	$6F98	    			MOVWF	_cmd_defaults+1, 1
$151E	$0E00	    			MOVLW	@@#lstr_13_cnc_control
$1520	$6F99	    			MOVWF	_cmd_defaults+2, 1
$1522	$0E86	    			MOVLW	#lstr_14_cnc_control
$1524	$6F9A	    			MOVWF	_cmd_step_multiplier_x+0, 1
$1526	$0E18	    			MOVLW	@#lstr_14_cnc_control
$1528	$6F9B	    			MOVWF	_cmd_step_multiplier_x+1, 1
$152A	$0E00	    			MOVLW	@@#lstr_14_cnc_control
$152C	$6F9C	    			MOVWF	_cmd_step_multiplier_x+2, 1
$152E	$0E8A	    			MOVLW	#lstr_15_cnc_control
$1530	$6F9D	    			MOVWF	_cmd_step_multiplier_y+0, 1
$1532	$0E18	    			MOVLW	@#lstr_15_cnc_control
$1534	$6F9E	    			MOVWF	_cmd_step_multiplier_y+1, 1
$1536	$0E00	    			MOVLW	@@#lstr_15_cnc_control
$1538	$6F9F	    			MOVWF	_cmd_step_multiplier_y+2, 1
$153A	$0E8E	    			MOVLW	#lstr_16_cnc_control
$153C	$6FA0	    			MOVWF	_cmd_step_multiplier_z+0, 1
$153E	$0E18	    			MOVLW	@#lstr_16_cnc_control
$1540	$6FA1	    			MOVWF	_cmd_step_multiplier_z+1, 1
$1542	$0E00	    			MOVLW	@@#lstr_16_cnc_control
$1544	$6FA2	    			MOVWF	_cmd_step_multiplier_z+2, 1
$1546	$0E92	    			MOVLW	#lstr_17_cnc_control
$1548	$6FA3	    			MOVWF	_cmd_step_multiplier_a+0, 1
$154A	$0E18	    			MOVLW	@#lstr_17_cnc_control
$154C	$6FA4	    			MOVWF	_cmd_step_multiplier_a+1, 1
$154E	$0E00	    			MOVLW	@@#lstr_17_cnc_control
$1550	$6FA5	    			MOVWF	_cmd_step_multiplier_a+2, 1
$1552	$0E96	    			MOVLW	#lstr_18_cnc_control
$1554	$6FA6	    			MOVWF	_cmd_enable_multiplers+0, 1
$1556	$0E18	    			MOVLW	@#lstr_18_cnc_control
$1558	$6FA7	    			MOVWF	_cmd_enable_multiplers+1, 1
$155A	$0E00	    			MOVLW	@@#lstr_18_cnc_control
$155C	$6FA8	    			MOVWF	_cmd_enable_multiplers+2, 1
$155E	$0E98	    			MOVLW	#lstr_19_cnc_control
$1560	$6FA9	    			MOVWF	_cmd_delay_cycles+0, 1
$1562	$0E18	    			MOVLW	@#lstr_19_cnc_control
$1564	$6FAA	    			MOVWF	_cmd_delay_cycles+1, 1
$1566	$0E00	    			MOVLW	@@#lstr_19_cnc_control
$1568	$6FAB	    			MOVWF	_cmd_delay_cycles+2, 1
$156A	$0E01	    			MOVLW	1
$156C	$6E16	    			MOVWF	_multipliers+0, 0
$156E	$0E01	    			MOVLW	1
$1570	$6E17	    			MOVWF	_multipliers+1, 0
$1572	$0E01	    			MOVLW	1
$1574	$6E18	    			MOVWF	_multipliers+2, 0
$1576	$0E01	    			MOVLW	1
$1578	$6E19	    			MOVWF	_multipliers+3, 0
$157A	$0E00	    			MOVLW	0
$157C	$6E1A	    			MOVWF	_multipliers+4, 0
$157E	$0E03	    			MOVLW	3
$1580	$6E1B	    			MOVWF	_multipliers+5, 0
$1582	$0E02	    			MOVLW	2
$1584	$6E1C	    			MOVWF	_multipliers+6, 0
$1586	$0E00	    			MOVLW	0
$1588	$6E15	    			MOVWF	_statusError+0, 0
$158A	$0E00	    			MOVLW	0
$158C	$6E1D	    			MOVWF	_currentSteps+0, 0
;cnc_control.c,143 :: 			unsigned short currentSteps = 0x00;
$158E	$0012	    			RETURN
$1590	$	_Usart_Init:
$1590	$8AAC	    			BSF	TXSTA, 5, 0
$1592	$0E90	    			MOVLW	144
$1594	$6EAB	    			MOVWF	RCSTA, 0
$1596	$8E94	    			BSF	TRISC, 7, 0
$1598	$9C94	    			BCF	TRISC, 6, 0
$159A	$	L_Usart_Init_0:
$159A	$AA9E	    			BTFSS	PIR1, 5, 0
$159C	$D003	    			BRA	L_Usart_Init_1
$159E	$CFAE	F0C6			MOVFF	RCREG, Usart_Init_tmp_L0
$15A2	$D7FB	    			BRA	L_Usart_Init_0
$15A4	$	L_Usart_Init_1:
$15A4	$0012	    			RETURN
$15A6	$	_main:
;cnc_control.c,496 :: 			void main(){
;cnc_control.c,503 :: 			Usart_Init(SERIAL_BAUD);
$15A6	$EC3C	F00A			CALL	GlobalInicnc_control
$15AA	$0E08	    			MOVLW	8
$15AC	$6EAF	    			MOVWF	SPBRG, 0
$15AE	$84AC	    			BSF	TXSTA, BRGH, 0
$15B0	$ECC8	F00A			CALL	_Usart_Init
;cnc_control.c,504 :: 			initRegisters();
$15B4	$ECCC	F007			CALL	_initRegisters
;cnc_control.c,507 :: 			Delay_ms(100);
$15B8	$0E02	    			MOVLW	2
$15BA	$6E0C	    			MOVWF	STACK_12, 0
$15BC	$0EFF	    			MOVLW	255
$15BE	$6E0B	    			MOVWF	STACK_11, 0
$15C0	$0EFF	    			MOVLW	255
$15C2	$6E0A	    			MOVWF	STACK_10, 0
$15C4	$2E0C	    			DECFSZ	STACK_12, F, 0
$15C6	$D001	    			BRA	$+2
$15C8	$D007	    			BRA	$+8
$15CA	$2E0B	    			DECFSZ	STACK_11, F, 0
$15CC	$D001	    			BRA	$+2
$15CE	$D003	    			BRA	$+4
$15D0	$2E0A	    			DECFSZ	STACK_10, F, 0
$15D2	$D7FE	    			BRA	$-1
$15D4	$D7FA	    			BRA	$-5
$15D6	$D7F6	    			BRA	$-9
$15D8	$0E06	    			MOVLW	6
$15DA	$6E0B	    			MOVWF	STACK_11, 0
$15DC	$0EFF	    			MOVLW	255
$15DE	$6E0A	    			MOVWF	STACK_10, 0
$15E0	$2E0B	    			DECFSZ	STACK_11, F, 0
$15E2	$D001	    			BRA	$+2
$15E4	$D003	    			BRA	$+4
$15E6	$2E0A	    			DECFSZ	STACK_10, F, 0
$15E8	$D7FE	    			BRA	$-1
$15EA	$D7FA	    			BRA	$-5
$15EC	$0E0A	    			MOVLW	10
$15EE	$6E0A	    			MOVWF	STACK_10, 0
$15F0	$2E0A	    			DECFSZ	STACK_10, F, 0
$15F2	$D7FE	    			BRA	$-1
;cnc_control.c,508 :: 			printMessage(splash);
$15F4	$C082	F0C2			MOVFF	_splash, FARG_printMessage+0
$15F8	$C083	F0C3			MOVFF	_splash+1, FARG_printMessage+1
$15FC	$C084	F0C4			MOVFF	_splash+2, FARG_printMessage+2
$1600	$ECDD	F007			CALL	_printMessage
;cnc_control.c,511 :: 			if ( ! readMemory() ){
$1604	$ECF7	F007			CALL	_readMemory
$1608	$5200	    			MOVF	STACK_0, 1, 0
$160A	$E108	    			BNZ	L_main_81
;cnc_control.c,512 :: 			printMessage(noEeprom);
$160C	$C088	F0C2			MOVFF	_noEeprom, FARG_printMessage+0
$1610	$C089	F0C3			MOVFF	_noEeprom+1, FARG_printMessage+1
$1614	$C08A	F0C4			MOVFF	_noEeprom+2, FARG_printMessage+2
$1618	$ECDD	F007			CALL	_printMessage
;cnc_control.c,513 :: 			}
$161C	$	L_main_81:
;cnc_control.c,514 :: 			printMessage(cmdPrompt);
$161C	$C085	F0C2			MOVFF	_cmdPrompt, FARG_printMessage+0
$1620	$C086	F0C3			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$1624	$C087	F0C4			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$1628	$ECDD	F007			CALL	_printMessage
;cnc_control.c,516 :: 			Delay_ms(200);
$162C	$0E03	    			MOVLW	3
$162E	$6E0C	    			MOVWF	STACK_12, 0
$1630	$0EFF	    			MOVLW	255
$1632	$6E0B	    			MOVWF	STACK_11, 0
$1634	$0EFF	    			MOVLW	255
$1636	$6E0A	    			MOVWF	STACK_10, 0
$1638	$2E0C	    			DECFSZ	STACK_12, F, 0
$163A	$D001	    			BRA	$+2
$163C	$D007	    			BRA	$+8
$163E	$2E0B	    			DECFSZ	STACK_11, F, 0
$1640	$D001	    			BRA	$+2
$1642	$D003	    			BRA	$+4
$1644	$2E0A	    			DECFSZ	STACK_10, F, 0
$1646	$D7FE	    			BRA	$-1
$1648	$D7FA	    			BRA	$-5
$164A	$D7F6	    			BRA	$-9
$164C	$0E0B	    			MOVLW	11
$164E	$6E0B	    			MOVWF	STACK_11, 0
$1650	$0EFF	    			MOVLW	255
$1652	$6E0A	    			MOVWF	STACK_10, 0
$1654	$2E0B	    			DECFSZ	STACK_11, F, 0
$1656	$D001	    			BRA	$+2
$1658	$D003	    			BRA	$+4
$165A	$2E0A	    			DECFSZ	STACK_10, F, 0
$165C	$D7FE	    			BRA	$-1
$165E	$D7FA	    			BRA	$-5
$1660	$0E18	    			MOVLW	24
$1662	$6E0A	    			MOVWF	STACK_10, 0
$1664	$2E0A	    			DECFSZ	STACK_10, F, 0
$1666	$D7FE	    			BRA	$-1
;cnc_control.c,519 :: 			RCON.IPEN = 1;
$1668	$8ED0	    			BSF	RCON, 7, 0
;cnc_control.c,520 :: 			INTCON.GIE = 1;
$166A	$8EF2	    			BSF	INTCON, 7, 0
;cnc_control.c,522 :: 			while(1) {
$166C	$	L_main_82:
;cnc_control.c,523 :: 			while ( Usart_Data_Ready() ){
$166C	$	L_main_84:
$166C	$EC1B	F008			CALL	_Usart_Data_Ready
$1670	$5200	    			MOVF	STACK_0, 1, 0
$1672	$B4D8	    			BTFSC	STATUS, Z, 0
$1674	$D0CE	    			BRA	L_main_85
;cnc_control.c,524 :: 			x = Usart_Read();
$1676	$EC21	F008			CALL	_Usart_Read
;cnc_control.c,530 :: 			if ( pushChar(x) ){
$167A	$C000	F0C2			MOVFF	STACK_0, FARG_pushChar+0
$167E	$EC2A	F008			CALL	_pushChar
$1682	$5000	    			MOVF	STACK_0, 0, 0
$1684	$1001	    			IORWF	STACK_0+1, 0, 0
$1686	$B4D8	    			BTFSC	STATUS, Z, 0
$1688	$D0C3	    			BRA	L_main_86
;cnc_control.c,532 :: 			if ( commandMatches(cmd_status ) ){
$168A	$C08E	F0C2			MOVFF	_cmd_status, FARG_commandMatches+0
$168E	$C08F	F0C3			MOVFF	_cmd_status+1, FARG_commandMatches+1
$1692	$C090	F0C4			MOVFF	_cmd_status+2, FARG_commandMatches+2
$1696	$EC5A	F008			CALL	_commandMatches
$169A	$5200	    			MOVF	STACK_0, 1, 0
$169C	$E003	    			BZ	L_main_87
;cnc_control.c,533 :: 			printStatus();
$169E	$EC92	F008			CALL	_printStatus
;cnc_control.c,534 :: 			}
$16A2	$D0AE	    			BRA	L_main_88
$16A4	$	L_main_87:
;cnc_control.c,535 :: 			else if ( commandMatches(cmd_saveEEprom )){
$16A4	$C091	F0C2			MOVFF	_cmd_saveEEprom, FARG_commandMatches+0
$16A8	$C092	F0C3			MOVFF	_cmd_saveEEprom+1, FARG_commandMatches+1
$16AC	$C093	F0C4			MOVFF	_cmd_saveEEprom+2, FARG_commandMatches+2
$16B0	$EC5A	F008			CALL	_commandMatches
$16B4	$5200	    			MOVF	STACK_0, 1, 0
$16B6	$E003	    			BZ	L_main_89
;cnc_control.c,536 :: 			writeMemory();
$16B8	$ECF6	F009			CALL	_writeMemory
;cnc_control.c,537 :: 			}
$16BC	$D0A1	    			BRA	L_main_90
$16BE	$	L_main_89:
;cnc_control.c,538 :: 			else if ( commandMatches(cmd_readEEprom )){
$16BE	$C094	F0C2			MOVFF	_cmd_readEEprom, FARG_commandMatches+0
$16C2	$C095	F0C3			MOVFF	_cmd_readEEprom+1, FARG_commandMatches+1
$16C6	$C096	F0C4			MOVFF	_cmd_readEEprom+2, FARG_commandMatches+2
$16CA	$EC5A	F008			CALL	_commandMatches
$16CE	$5200	    			MOVF	STACK_0, 1, 0
$16D0	$E003	    			BZ	L_main_91
;cnc_control.c,539 :: 			readMemory();
$16D2	$ECF7	F007			CALL	_readMemory
;cnc_control.c,540 :: 			}
$16D6	$D094	    			BRA	L_main_92
$16D8	$	L_main_91:
;cnc_control.c,541 :: 			else if ( commandMatches(cmd_defaults)){
$16D8	$C097	F0C2			MOVFF	_cmd_defaults, FARG_commandMatches+0
$16DC	$C098	F0C3			MOVFF	_cmd_defaults+1, FARG_commandMatches+1
$16E0	$C099	F0C4			MOVFF	_cmd_defaults+2, FARG_commandMatches+2
$16E4	$EC5A	F008			CALL	_commandMatches
$16E8	$5200	    			MOVF	STACK_0, 1, 0
$16EA	$E003	    			BZ	L_main_93
;cnc_control.c,543 :: 			clearMemory();
$16EC	$EC12	F00A			CALL	_clearMemory
;cnc_control.c,544 :: 			}
$16F0	$D087	    			BRA	L_main_94
$16F2	$	L_main_93:
;cnc_control.c,545 :: 			else if ( commandMatches(cmd_step_multiplier_x)){
$16F2	$C09A	F0C2			MOVFF	_cmd_step_multiplier_x, FARG_commandMatches+0
$16F6	$C09B	F0C3			MOVFF	_cmd_step_multiplier_x+1, FARG_commandMatches+1
$16FA	$C09C	F0C4			MOVFF	_cmd_step_multiplier_x+2, FARG_commandMatches+2
$16FE	$EC5A	F008			CALL	_commandMatches
$1702	$5200	    			MOVF	STACK_0, 1, 0
$1704	$E00A	    			BZ	L_main_95
;cnc_control.c,546 :: 			multipliers.x = findIntValue(cmdBuffer);
$1706	$0E58	    			MOVLW	_cmdBuffer
$1708	$0100	    			MOVLB	0
$170A	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$170C	$0E00	    			MOVLW	@_cmdBuffer
$170E	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$1710	$EC21	F00A			CALL	_findIntValue
$1714	$C000	F016			MOVFF	STACK_0, _multipliers+0
;cnc_control.c,547 :: 			}
$1718	$D073	    			BRA	L_main_96
$171A	$	L_main_95:
;cnc_control.c,548 :: 			else if ( commandMatches(cmd_step_multiplier_y)){
$171A	$C09D	F0C2			MOVFF	_cmd_step_multiplier_y, FARG_commandMatches+0
$171E	$C09E	F0C3			MOVFF	_cmd_step_multiplier_y+1, FARG_commandMatches+1
$1722	$C09F	F0C4			MOVFF	_cmd_step_multiplier_y+2, FARG_commandMatches+2
$1726	$EC5A	F008			CALL	_commandMatches
$172A	$5200	    			MOVF	STACK_0, 1, 0
$172C	$E00A	    			BZ	L_main_97
;cnc_control.c,549 :: 			multipliers.y = findIntValue(cmdBuffer);
$172E	$0E58	    			MOVLW	_cmdBuffer
$1730	$0100	    			MOVLB	0
$1732	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$1734	$0E00	    			MOVLW	@_cmdBuffer
$1736	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$1738	$EC21	F00A			CALL	_findIntValue
$173C	$C000	F017			MOVFF	STACK_0, _multipliers+1
;cnc_control.c,550 :: 			}
$1740	$D05F	    			BRA	L_main_98
$1742	$	L_main_97:
;cnc_control.c,551 :: 			else if ( commandMatches(cmd_step_multiplier_z)){
$1742	$C0A0	F0C2			MOVFF	_cmd_step_multiplier_z, FARG_commandMatches+0
$1746	$C0A1	F0C3			MOVFF	_cmd_step_multiplier_z+1, FARG_commandMatches+1
$174A	$C0A2	F0C4			MOVFF	_cmd_step_multiplier_z+2, FARG_commandMatches+2
$174E	$EC5A	F008			CALL	_commandMatches
$1752	$5200	    			MOVF	STACK_0, 1, 0
$1754	$E00A	    			BZ	L_main_99
;cnc_control.c,552 :: 			multipliers.z = findIntValue(cmdBuffer);
$1756	$0E58	    			MOVLW	_cmdBuffer
$1758	$0100	    			MOVLB	0
$175A	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$175C	$0E00	    			MOVLW	@_cmdBuffer
$175E	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$1760	$EC21	F00A			CALL	_findIntValue
$1764	$C000	F018			MOVFF	STACK_0, _multipliers+2
;cnc_control.c,553 :: 			}
$1768	$D04B	    			BRA	L_main_100
$176A	$	L_main_99:
;cnc_control.c,554 :: 			else if ( commandMatches(cmd_step_multiplier_a)){
$176A	$C0A3	F0C2			MOVFF	_cmd_step_multiplier_a, FARG_commandMatches+0
$176E	$C0A4	F0C3			MOVFF	_cmd_step_multiplier_a+1, FARG_commandMatches+1
$1772	$C0A5	F0C4			MOVFF	_cmd_step_multiplier_a+2, FARG_commandMatches+2
$1776	$EC5A	F008			CALL	_commandMatches
$177A	$5200	    			MOVF	STACK_0, 1, 0
$177C	$E00A	    			BZ	L_main_101
;cnc_control.c,555 :: 			multipliers.a = findIntValue(cmdBuffer);
$177E	$0E58	    			MOVLW	_cmdBuffer
$1780	$0100	    			MOVLB	0
$1782	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$1784	$0E00	    			MOVLW	@_cmdBuffer
$1786	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$1788	$EC21	F00A			CALL	_findIntValue
$178C	$C000	F019			MOVFF	STACK_0, _multipliers+3
;cnc_control.c,556 :: 			}
$1790	$D037	    			BRA	L_main_102
$1792	$	L_main_101:
;cnc_control.c,557 :: 			else if ( commandMatches(cmd_enable_multiplers)){
$1792	$C0A6	F0C2			MOVFF	_cmd_enable_multiplers, FARG_commandMatches+0
$1796	$C0A7	F0C3			MOVFF	_cmd_enable_multiplers+1, FARG_commandMatches+1
$179A	$C0A8	F0C4			MOVFF	_cmd_enable_multiplers+2, FARG_commandMatches+2
$179E	$EC5A	F008			CALL	_commandMatches
$17A2	$5200	    			MOVF	STACK_0, 1, 0
$17A4	$E00A	    			BZ	L_main_103
;cnc_control.c,558 :: 			multipliers.enable = findIntValue(cmdBuffer);
$17A6	$0E58	    			MOVLW	_cmdBuffer
$17A8	$0100	    			MOVLB	0
$17AA	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$17AC	$0E00	    			MOVLW	@_cmdBuffer
$17AE	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$17B0	$EC21	F00A			CALL	_findIntValue
$17B4	$C000	F01A			MOVFF	STACK_0, _multipliers+4
;cnc_control.c,559 :: 			}
$17B8	$D023	    			BRA	L_main_104
$17BA	$	L_main_103:
;cnc_control.c,560 :: 			else if ( commandMatches(cmd_delay_cycles)){
$17BA	$C0A9	F0C2			MOVFF	_cmd_delay_cycles, FARG_commandMatches+0
$17BE	$C0AA	F0C3			MOVFF	_cmd_delay_cycles+1, FARG_commandMatches+1
$17C2	$C0AB	F0C4			MOVFF	_cmd_delay_cycles+2, FARG_commandMatches+2
$17C6	$EC5A	F008			CALL	_commandMatches
$17CA	$5200	    			MOVF	STACK_0, 1, 0
$17CC	$E00A	    			BZ	L_main_105
;cnc_control.c,561 :: 			multipliers.delayCycles = findIntValue(cmdBuffer);
$17CE	$0E58	    			MOVLW	_cmdBuffer
$17D0	$0100	    			MOVLB	0
$17D2	$6FC2	    			MOVWF	FARG_findIntValue+0, 1
$17D4	$0E00	    			MOVLW	@_cmdBuffer
$17D6	$6FC3	    			MOVWF	FARG_findIntValue+1, 1
$17D8	$EC21	F00A			CALL	_findIntValue
$17DC	$C000	F01B			MOVFF	STACK_0, _multipliers+5
;cnc_control.c,562 :: 			}
$17E0	$D00F	    			BRA	L_main_106
$17E2	$	L_main_105:
;cnc_control.c,564 :: 			printMessage(unknownCommand);
$17E2	$C08B	F0C2			MOVFF	_unknownCommand, FARG_printMessage+0
$17E6	$C08C	F0C3			MOVFF	_unknownCommand+1, FARG_printMessage+1
$17EA	$C08D	F0C4			MOVFF	_unknownCommand+2, FARG_printMessage+2
$17EE	$ECDD	F007			CALL	_printMessage
;cnc_control.c,565 :: 			USART_Send_String(cmdBuffer);
$17F2	$0E58	    			MOVLW	_cmdBuffer
$17F4	$0101	    			MOVLB	1
$17F6	$6F3E	    			MOVWF	FARG_USART_Send_String+0, 1
$17F8	$0E00	    			MOVLW	@_cmdBuffer
$17FA	$6F3F	    			MOVWF	FARG_USART_Send_String+1, 1
$17FC	$EC6C	F003			CALL	_USART_Send_String
;cnc_control.c,566 :: 			}
$1800	$	L_main_106:
$1800	$	L_main_104:
$1800	$	L_main_102:
$1800	$	L_main_100:
$1800	$	L_main_98:
$1800	$	L_main_96:
$1800	$	L_main_94:
$1800	$	L_main_92:
$1800	$	L_main_90:
$1800	$	L_main_88:
;cnc_control.c,567 :: 			printMessage(cmdPrompt);
$1800	$C085	F0C2			MOVFF	_cmdPrompt, FARG_printMessage+0
$1804	$C086	F0C3			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$1808	$C087	F0C4			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$180C	$ECDD	F007			CALL	_printMessage
;cnc_control.c,568 :: 			}
$1810	$	L_main_86:
;cnc_control.c,569 :: 			}
$1810	$D72D	    			BRA	L_main_84
$1812	$	L_main_85:
;cnc_control.c,572 :: 			};
$1812	$D72C	    			BRA	L_main_82
;cnc_control.c,573 :: 			}
$1814	$D7FF	    			BRA	$
$1816	$4E43	    			DATA	DATA lstr_1_cnc_control
$1818	$2043	    			DATA	DATA lstr_1_cnc_control
$181A	$6F43	    			DATA	DATA lstr_1_cnc_control
$181C	$746E	    			DATA	DATA lstr_1_cnc_control
$181E	$6F72	    			DATA	DATA lstr_1_cnc_control
$1820	$6C6C	    			DATA	DATA lstr_1_cnc_control
$1822	$7265	    			DATA	DATA lstr_1_cnc_control
$1824	$7620	    			DATA	DATA lstr_1_cnc_control
$1826	$2E30	    			DATA	DATA lstr_1_cnc_control
$1828	$0031	    			DATA	DATA lstr_1_cnc_control
$182A	$FF00	    			DATA	DATA
$182C	$430A	    			DATA	DATA lstr_2_cnc_control
$182E	$646D	    			DATA	DATA lstr_2_cnc_control
$1830	$3E3A	    			DATA	DATA lstr_2_cnc_control
$1832	$FF00	    			DATA	DATA
$1834	$4E0A	    			DATA	DATA lstr_3_cnc_control
$1836	$206F	    			DATA	DATA lstr_3_cnc_control
$1838	$4545	    			DATA	DATA lstr_3_cnc_control
$183A	$5250	    			DATA	DATA lstr_3_cnc_control
$183C	$4D4F	    			DATA	DATA lstr_3_cnc_control
$183E	$4420	    			DATA	DATA lstr_3_cnc_control
$1840	$7461	    			DATA	DATA lstr_3_cnc_control
$1842	$2E61	    			DATA	DATA lstr_3_cnc_control
$1844	$FF00	    			DATA	DATA
$1846	$3F0A	    			DATA	DATA lstr_4_cnc_control
$1848	$003A	    			DATA	DATA lstr_4_cnc_control
$184A	$7441	    			DATA	DATA lstr_5_cnc_control
$184C	$4C20	    			DATA	DATA lstr_5_cnc_control
$184E	$6D69	    			DATA	DATA lstr_5_cnc_control
$1850	$7469	    			DATA	DATA lstr_5_cnc_control
$1852	$2E73	    			DATA	DATA lstr_5_cnc_control
$1854	$FF00	    			DATA	DATA
$1856	$2D45	    			DATA	DATA lstr_6_cnc_control
$1858	$5453	    			DATA	DATA lstr_6_cnc_control
$185A	$504F	    			DATA	DATA lstr_6_cnc_control
$185C	$FF00	    			DATA	DATA
$185E	$6553	    			DATA	DATA lstr_7_cnc_control
$1860	$7672	    			DATA	DATA lstr_7_cnc_control
$1862	$206F	    			DATA	DATA lstr_7_cnc_control
$1864	$6146	    			DATA	DATA lstr_7_cnc_control
$1866	$6C75	    			DATA	DATA lstr_7_cnc_control
$1868	$0074	    			DATA	DATA lstr_7_cnc_control
$186A	$6B4F	    			DATA	DATA lstr_8_cnc_control
$186C	$FF00	    			DATA	DATA
$186E	$6944	    			DATA	DATA lstr_9_cnc_control
$1870	$6173	    			DATA	DATA lstr_9_cnc_control
$1872	$6C62	    			DATA	DATA lstr_9_cnc_control
$1874	$6465	    			DATA	DATA lstr_9_cnc_control
$1876	$0020	    			DATA	DATA lstr_9_cnc_control
$1878	$0073	    			DATA	DATA lstr_10_cnc_control
$187A	$7673	    			DATA	DATA lstr_11_cnc_control
$187C	$FF00	    			DATA	DATA
$187E	$6472	    			DATA	DATA lstr_12_cnc_control
$1880	$FF00	    			DATA	DATA
$1882	$6564	    			DATA	DATA lstr_13_cnc_control
$1884	$0066	    			DATA	DATA lstr_13_cnc_control
$1886	$6D73	    			DATA	DATA lstr_14_cnc_control
$1888	$0078	    			DATA	DATA lstr_14_cnc_control
$188A	$6D73	    			DATA	DATA lstr_15_cnc_control
$188C	$0079	    			DATA	DATA lstr_15_cnc_control
$188E	$6D73	    			DATA	DATA lstr_16_cnc_control
$1890	$007A	    			DATA	DATA lstr_16_cnc_control
$1892	$6D73	    			DATA	DATA lstr_17_cnc_control
$1894	$0061	    			DATA	DATA lstr_17_cnc_control
$1896	$006D	    			DATA	DATA lstr_18_cnc_control
$1898	$6364	    			DATA	DATA lstr_19_cnc_control
$189A	$6379	    			DATA	DATA lstr_19_cnc_control
$189C	$FF00	    			DATA	DATA
